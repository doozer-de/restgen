// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x1e\x0a\xa9\x50\xe8\x3d\x0e\x29\xfc\xb0\xa6\x5d\x1a\x74\x69\x53\xdb\x6d\x1f\x82\x60\xa0\xa5\xb3\xc4\x45\x26\x1d\x92\xb2\xe3\x0a\xfc\xdf\x87\xa3\x7e\xc4\x4e\xb6\x04\xc3\xf6\x14\x91\x77\xf7\xdd\xdd\x77\x1f\xcf\x99\x4c\xe0\x4c\x17\x08\x25\x2a\x34\xc2\x61\x01\xcb\x3d\x94\xd2\x55\xcd\x92\xe7\x7a\x3d\x29\xb4\xfe\x81\xe6\xa4\xc0\x89\x41\xeb\x4a\x54\x1c\xde\x7d\x86\x4f\x9f\x17\xf0\xfe\xdd\xc5\x82\x33\xb6\x11\xf9\xad\x28\x11\xda\x96\x2f\x84\x29\xd1\x5d\x75\x17\xde\x33\x26\xd7\x1b\x6d\x1c\x24\x2c\x8a\x15\xba\x49\xe5\xdc\x26\x66\x51\x2c\xf5\x44\xea\xc6\xc9\x9a\x0e\xa8\x72\x5d\x48\x55\x4e\xfe\xb4\x5a\xd1\xc5\x6a\xed\x62\xc6\xa2\xb8\x6d\xf9\xb9\x1e\xc1\xc8\xf2\x8f\x65\x05\xa3\xae\x85\x2a\xb9\x36\xe5\xe4\x7e\x42\xd9\x72\xad\x1c\xde\x93\xad\x6d\x8d\x50\x25\x02\xbf\x08\xf5\x58\xef\x59\x14\xf0\x03\x6c\xdb\x9e\x00\xaa\xc2\x7b\x96\x32\xb6\x15\x86\xca\x5d\x0a\x8b\x5f\x67\x17\x30\x05\x72\x7b\xdb\x9d\x82\xf7\x1f\x30\x85\xae\x78\xfe\x4e\xda\x5c\x98\x82\xc2\xdc\x7e\x83\xf0\x65\x7e\x25\x8c\x58\xa3\x43\x03\xd6\x99\x26\x77\xd0\xb2\xe8\x23\xee\x01\xe8\x2c\x55\x09\x93\x09\x7c\xaf\x64\x5e\xc1\x2d\xee\x59\xf4\x9b\xc4\xba\x38\x30\x95\x1a\x2d\x38\x0d\xbb\xe0\xb2\x0a\x56\xa9\x40\x40\xa9\x7b\x40\x16\x2d\x28\xd3\x41\x8c\xad\x74\x53\x17\x50\x89\x2d\xc2\xae\x12\x0e\xa8\x14\xe6\x19\x63\xab\x46\xe5\x90\x58\x78\x7d\x3e\x8c\x76\x8e\x66\x2b\x73\x4c\xe1\x1c\xdd\x07\xa1\x8a\x1a\x8d\x5d\xe8\x19\x96\xd2\x3a\x34\x49\x0a\xd7\x37\xc4\x26\x1f\x6e\xa8\x7c\x83\xae\x31\xea\xb1\xa5\x85\x91\xd3\x73\x74\x97\x62\xb3\xc1\xe2\x12\x5d\xa5\x8b\x8e\xdc\x16\xba\xd3\x69\xe0\x6f\xf6\x7e\xbe\xe8\xce\xde\xc7\x19\x5c\x09\x57\x75\x86\x0f\xc2\xac\xb5\x92\x3f\xb0\x20\x17\xba\x0f\x0e\x7d\x6d\xa7\x60\x79\xdb\xf2\x4f\x62\x8d\xde\x83\xcf\x0e\x47\x15\x79\xea\xf1\xf9\x16\xfb\xb1\x25\xe9\x40\xd7\x43\x3b\xfd\x7c\x5f\xc0\x98\xa3\x7b\x6f\x8c\x36\x7d\x3d\x49\x05\x81\x84\xc3\xbb\x14\x90\x4e\x04\x2d\x57\x50\xc1\x74\x0a\x4a\xd6\x74\x1c\x52\xad\xd6\x7d\xc4\x2a\x89\x0f\x23\x21\x17\x4a\x69\x07\x4b\xa4\x88\x38\xa5\x96\x22\xcb\xf1\xd0\x65\x0a\xd5\x58\xb2\x92\x35\x95\x1b\x94\xf6\xb8\xd4\x03\xb9\x0d\x37\x6d\xcb\xfb\x4f\x52\x0c\x31\x76\x84\xfc\xa4\x91\x91\x8a\x4f\xb8\x7b\x0c\x9f\xd8\x27\x70\x19\x3c\x0f\x97\x42\xf2\x84\xd0\x3e\x26\xed\xc9\xb2\x7f\x43\x96\x92\x75\x76\xc4\xd8\xa2\x42\x28\xe5\x16\x15\x9c\xcf\xae\xce\x60\xe8\xee\x80\xbb\xa6\xee\xc9\x1b\x99\x7a\xf5\x38\x31\x25\xe8\x3f\x4f\xc1\x66\x2c\x3a\xe2\xe2\xf4\xa8\x95\x8c\x45\x3e\x1b\xc8\x7e\x4e\xe4\xcf\xe8\x66\x14\x6d\x92\xbb\x7b\xe8\xf7\x10\x3f\xeb\xfe\x66\xb0\x03\x5a\x84\x7c\x86\x76\xa3\x95\xc5\xef\x46\x3a\x34\x19\x18\x78\xdd\xdf\xdf\x35\x68\x5d\xda\xc9\xf5\x0e\x4e\xa7\x04\x78\xa1\x36\x8d\x23\xee\x3b\xe4\xd6\xd3\x6b\x90\x2b\xc0\x3b\x88\x5f\xc7\x10\xde\xd8\x5b\x5d\xec\xe1\x24\x3c\xc0\xa5\x2e\xf6\x81\x6f\x0a\xef\xf7\xd5\x0c\x45\xf1\x6b\x5d\x27\x86\x93\x63\xca\x22\x9a\x02\xb9\xfc\xf4\x30\x87\x47\x0a\xa4\x06\x32\xd8\x65\x60\x02\x18\xc5\xf4\x2c\xb3\x88\xf4\x1a\x15\xb8\xa2\xf1\x07\x44\x7e\x56\x6b\x8b\x49\xca\x3a\x82\x61\x0a\xb4\xd2\xf9\x57\xb5\x16\xc6\x56\xa2\x4e\xba\xa2\x5e\x19\xbc\xfb\x5f\x92\x3f\x6c\x03\xfa\xde\x49\x57\x75\x34\x7c\x69\xd0\xec\xe7\xe1\xc9\x07\x2e\xb6\xa2\x6e\xd0\x12\x11\x86\x7f\x9d\xfd\xce\x83\x3d\x21\xb8\x71\xbe\xc1\x4f\xae\x60\x9b\x81\xbe\x25\xcf\x2e\xe6\x9a\x96\xd4\x47\xdc\x7b\x1f\xdf\xbc\x21\x4b\xa8\x52\xae\xe0\x7e\xf0\x0b\xc2\x6f\xdb\x73\x74\x67\x5a\x6d\xd1\x38\x34\x34\x20\xe0\x97\xe8\x44\x21\x9c\xf0\x3e\xd9\x5e\xff\x7c\x93\x3e\x84\x47\x6d\x3b\x5a\xf9\x20\x9e\x50\x00\xb5\x77\x77\x6c\x75\xdd\x52\x84\x29\xdc\x93\x83\xef\x69\x6f\xdb\x7e\x0d\x0e\x1f\xc7\x0c\x50\xd0\x37\x61\xba\x5d\xbc\xa1\x1f\x25\x3b\x16\x1b\x30\xe9\x86\xe8\x7d\x4a\xc2\xbf\xee\xae\x83\xbf\x26\xcd\x7b\x7f\xc3\xbf\x11\x71\x2f\x77\x1b\x3d\xb4\x7b\x02\x2f\x34\xfc\xa4\xd9\xc8\xa0\xdd\x8c\xea\xb6\xc3\x66\xe2\x47\xef\x6e\x14\xda\x53\x9d\xbd\x28\xb3\x41\x65\x9e\x45\xcb\x31\x4f\x10\xf3\x65\x2f\x65\xaa\xe0\x3f\x63\xef\xf8\x07\x14\x05\xfd\xf2\xf2\x39\xba\x24\x0e\x1b\x42\xb9\x13\xda\xf1\x71\x06\xb1\xd8\x6c\x6a\x99\x0b\x27\xb5\x0a\xff\x1d\xbd\x81\xbc\x12\xc6\xa2\x9b\x36\x6e\x75\xf2\x0b\xad\xbd\x30\xa1\x39\xba\xb9\x13\xae\xb1\x09\x65\xea\x2a\xdb\xf1\xb0\x57\x92\x65\xca\x3c\x1b\x88\xfb\x2b\x00\x00\xff\xff\x6f\xb9\x82\x3f\xed\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1496235708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

