// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x1e\x0a\xa9\x50\xe8\x3d\x67\xf0\xc3\x9a\x75\x69\xd1\xa5\x48\xed\xb4\x7d\x08\x82\x81\x96\xce\x12\x17\x99\x54\x48\xca\x8e\x2b\xf0\x7f\x1f\x8e\xfa\x11\x3b\x1e\x12\x0c\xdb\x53\x44\xde\xdd\xc7\xef\x3e\x7e\x3c\xa7\x11\xf9\xbd\x28\x11\xba\x8e\xdf\x08\x53\xa2\xbb\xee\x37\xbc\x67\x4c\x6e\x1a\x6d\x1c\x24\x2c\x8a\x15\xba\x59\xe5\x5c\x13\xb3\x28\x96\x7a\x26\x75\xeb\x64\x4d\x0b\x54\xb9\x2e\xa4\x2a\x67\x7f\x59\xad\x68\x63\xbd\x71\x31\x63\x51\xdc\x75\xfc\x52\x4f\x60\x14\x29\xa5\xab\xda\x15\xcf\xf5\x66\x56\x68\xfd\x03\xcd\x59\x81\x33\x83\xd6\x85\xa0\xae\x85\x2a\xb9\x36\xe5\xec\x71\x46\xa7\xe5\x5a\x39\x7c\xa4\x58\xd7\x19\xa1\x4a\x04\xfe\x31\xf0\xb1\xde\xb3\x28\xe0\x07\xd8\xae\x3b\x03\x54\x85\xf7\x2c\x65\x6c\x2b\x0c\xd1\x5d\x09\x8b\x5f\x17\x1f\x61\x0e\x94\xf6\xae\x5f\x85\xec\x3f\x61\x0e\x3d\x79\xfe\x9b\xb4\xb9\x30\x05\x95\xb9\x7d\x83\xf0\x65\x79\x2d\x8c\xd8\xa0\x43\x03\xd6\x99\x36\x77\xd0\xb1\xe8\x13\xee\x01\x68\x2d\x55\x09\xb3\x19\x7c\xaf\x64\x5e\xc1\x3d\xee\x59\xf4\xbb\xc4\xba\x38\x08\x95\x1a\x2d\x38\x0d\xbb\x90\xb2\x0e\x51\xa9\x40\x40\xa9\x07\x40\x16\xdd\xd0\x49\x07\x35\xb6\xd2\x6d\x5d\x40\x25\xb6\x08\xbb\x4a\x38\x20\x2a\xcc\x33\xc6\xd6\xad\xca\x21\xb1\xf0\xf6\x12\x15\x1a\xe1\xb0\x58\xa2\xd9\xca\x1c\x53\xb8\x44\xf7\x41\xa8\xa2\x46\x63\x6f\xf4\x02\x4b\x69\x1d\x9a\x24\x85\xdb\x3b\x52\x93\x8f\x3b\x44\xdf\xa0\x6b\x8d\x7a\x1e\xe9\x60\xd2\xf4\x12\xdd\x95\x68\x1a\x2c\xae\xd0\x55\xba\xe8\xc5\xed\xa0\x5f\x9d\x07\xfd\x16\xef\x97\x37\xfd\xda\xfb\x38\x83\x6b\xe1\xaa\x3e\xf0\x41\x98\x8d\x56\xf2\x07\x16\x94\x42\xfb\x21\x61\xe0\x76\x0e\x96\x77\x1d\xff\x2c\x36\xe8\x3d\xf8\xec\xf0\xaa\x22\x4f\x3d\xbe\xdc\xe2\x70\x6d\x49\x3a\xca\xf5\xd4\xce\x70\xbf\xaf\x60\x2c\xd1\xbd\x37\x46\x9b\x81\x4f\x52\x41\x10\xe1\x70\x2f\x05\xa4\x15\x41\xcb\x35\x54\x30\x9f\x83\x92\x35\x2d\xc7\xa3\xd6\x9b\xa1\x62\x9d\xc4\x87\x95\x90\x0b\xa5\xb4\x83\x15\x52\x45\x9c\x52\x4b\x91\xe5\x78\x98\x32\x87\x6a\xa2\xac\x64\x4d\x74\x83\xd3\x9e\x53\x3d\xb0\xdb\xb8\xd3\x75\x7c\xf8\x24\xc7\x90\x62\x47\xc8\x27\x8d\x4c\x52\x7c\xc6\xdd\x73\xf8\xc4\x9e\xc0\x65\xf0\x32\x5c\x0a\xc9\x89\xa0\x43\x4d\x3a\x88\x65\xff\x41\x2c\x25\xeb\xec\x48\xb1\x9b\x0a\xa1\x94\x5b\x54\x70\xb9\xb8\xbe\x80\xb1\xbb\x03\xed\xda\x7a\x10\x6f\x52\xea\xcd\xf3\x83\xe9\x80\xe1\xf3\x1c\x6c\xc6\xa2\x23\x2d\xce\x8f\x5a\xc9\x58\xe4\xb3\x51\xec\x97\x4c\xfe\x82\x6f\x26\xd3\x26\xb9\x7b\x84\x61\x0e\xf1\x8b\xfe\x6f\x06\x3b\xa0\x41\xc8\x17\x68\x1b\xad\x2c\x7e\x37\xd2\xa1\xc9\xc0\xc0\xdb\x61\xff\xa1\x45\xeb\xd2\xde\xae\x0f\x70\x3e\x27\xc0\x8f\xaa\x69\x1d\x69\xdf\x23\x77\x9e\x5e\x83\x5c\x03\x3e\x40\xfc\x36\x86\xf0\xc6\xde\xe9\x62\x0f\x67\xe1\x01\xae\x74\xb1\x0f\x7a\x53\xf9\x30\xaf\x16\x28\x8a\x5f\xeb\x3a\x31\x9c\x12\x53\x16\xd1\x2d\x50\xca\x4f\x4f\xf7\xf0\xcc\x81\xd4\x40\x06\xbb\x0c\x4c\x00\xa3\x9a\x41\x65\x16\x91\x5f\xa3\x02\xd7\x74\xfd\x01\x91\x5f\xd4\xda\x62\x92\xb2\x5e\x60\x98\x03\x8d\x74\xfe\x55\x6d\x84\xb1\x95\xa8\x93\x9e\xd4\x1b\x83\x0f\xff\xcb\xe1\x4f\xd3\x80\xbe\x77\xd2\x55\xbd\x0c\x5f\x5a\x34\xfb\x65\x78\xf2\x41\x8b\xad\xa8\x5b\xb4\x24\x84\xe1\x5f\x17\x7f\xf0\x10\x4f\x08\x6e\xba\xdf\x90\x27\xd7\xb0\xcd\x40\xdf\x53\x66\x5f\x73\x4b\x43\xea\x13\xee\xbd\x8f\xef\x7e\xa1\x48\x60\x29\xd7\xf0\x38\xe6\x05\xe3\x77\xdd\x25\xba\x0b\xad\xb6\x68\x1c\x1a\xba\x20\xe0\x57\xe8\x44\x21\x9c\xf0\x3e\xd9\xde\xfe\x7c\x97\x3e\x95\x47\x5d\x37\x45\xf9\x68\x9e\x40\x80\xda\x7b\x38\x8e\xba\x7e\x28\xc2\x1c\x1e\x29\xc1\x0f\xb2\x77\xdd\x30\x06\xc7\x8f\x63\x05\xa8\xe8\x9b\x30\xfd\x2c\x6e\xe8\x47\xc9\x4e\x64\x03\x26\xed\x90\xbc\xa7\x22\xfc\xeb\xee\x7a\xf8\x5b\xf2\xbc\xf7\x77\xfc\x1b\x09\xf7\x7a\xb7\xd1\x53\xbb\x67\xf0\x4a\xc3\x27\xcd\x46\x06\x6d\x33\xb9\xdb\x8e\x93\x89\x1f\xbd\xbb\xc9\x68\xa7\x3e\x7b\xd5\x66\xa3\xcb\x3c\x8b\x56\xd3\x39\xc1\xcc\x57\x83\x95\x89\xc1\x7f\xc6\xde\xf1\x0f\x28\x0a\xfa\xe5\xe5\x4b\x74\x49\x1c\x26\x84\x72\x67\x34\xe3\xe3\x0c\x62\xd1\x34\xb5\xcc\x85\x93\x5a\xf5\xff\x1d\xa5\xa1\x75\x47\xd9\x4b\x27\x5c\x6b\x13\x82\xee\xa9\xec\x78\x18\x24\xc9\x2a\x65\x9e\x8d\x4a\xfd\x1d\x00\x00\xff\xff\xd8\x75\x1b\x12\x9d\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2461, mode: os.FileMode(436), modTime: time.Unix(1484572043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

