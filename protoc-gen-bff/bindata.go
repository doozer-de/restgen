// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5d\x6f\xdb\x36\x14\x7d\x16\x7f\xc5\x9d\x1e\x0a\xa9\x70\xe8\x3d\x0e\x29\xfc\xb0\x66\x9d\x5b\x74\x29\x52\x3b\x6d\x1f\x82\x60\xa0\xa5\x6b\x8b\xab\x4c\x2a\x24\x65\xc7\x25\xf8\xdf\x87\x4b\x49\xfe\x88\x87\x04\x43\xdf\xcc\xfb\x7d\x0e\x0f\xaf\xdc\x88\xe2\xbb\x58\x21\x78\xcf\x6f\x85\x59\xa1\xbb\xe9\x0c\x21\x30\x26\xd7\x8d\x36\x0e\x32\x96\xa4\x0a\xdd\xb8\x72\xae\x49\x59\x92\x4a\x3d\x96\xba\x75\xb2\xa6\x03\xaa\x42\x97\x52\xad\xc6\xff\x58\xad\xc8\xb0\x5c\xbb\x94\xb1\x24\xf5\x9e\x4f\xf5\xbe\x18\x79\x56\xd2\x55\xed\x82\x17\x7a\x3d\x2e\xb5\xfe\x81\xe6\xa2\xc4\xb1\x41\xeb\x52\x96\x78\x6f\x84\x5a\x21\xf0\x0f\xb1\xa7\x0d\x81\x25\xb1\x46\x4c\xf5\xfe\x02\x50\x95\x21\xb0\x9c\xb1\x8d\x30\x34\xd2\x42\x58\xfc\x32\xfb\x00\x13\xa0\xb0\xb7\xdd\x29\x46\xff\x0d\x13\xe8\x06\xe4\x7f\x48\x5b\x08\x53\x52\x9a\xdb\x35\x08\x9f\xe7\x37\xc2\x88\x35\x3a\x34\x60\x9d\x69\x0b\x07\x9e\x25\x1f\x71\x07\x40\x67\xa9\x56\x30\x1e\xc3\xb7\x4a\x16\x15\x7c\xc7\x1d\x4b\xfe\x94\x58\x97\x47\xae\x95\x46\x0b\x4e\xc3\x36\x86\x2c\xa3\x57\x2a\x10\xb0\xd2\x7d\x41\x96\xdc\x52\xa7\xa3\x1c\x5b\xe9\xb6\x2e\xa1\x12\x1b\x84\x6d\x25\x1c\xd0\x28\x2c\x30\xc6\x96\xad\x2a\x20\xb3\xf0\x7a\x8a\x0a\x8d\x70\x58\xce\xd1\x6c\x64\x81\x39\x4c\xd1\xbd\x17\xaa\xac\xd1\xd8\x5b\x3d\xc3\x95\xb4\x0e\x4d\x96\xc3\xdd\x3d\x31\xc6\x07\x0b\x8d\x6f\xd0\xb5\x46\x3d\xf5\x78\xd8\x73\x3a\x45\x77\x2d\x9a\x06\xcb\x6b\x74\x95\x2e\x3b\x72\x3d\x74\xa7\xcb\xc8\xdf\xec\xdd\xfc\xb6\x3b\x87\x90\x8e\xe0\x46\xb8\xaa\x73\xbc\x17\x66\xad\x95\xfc\x81\x25\x85\x90\x3d\x06\xf4\xb3\x5d\x82\xe5\xde\xf3\x4f\x62\x8d\x21\x40\x18\x1d\x5f\x55\x12\x08\xe3\xf3\x10\xfb\x6b\xcb\xf2\x81\xae\x03\x9c\xfe\x7e\x5f\xa8\x31\x47\xf7\xce\x18\x6d\xfa\x79\xb2\x0a\x22\x09\xc7\xb6\x1c\x90\x4e\x54\x5a\x2e\xa1\x82\xc9\x04\x94\xac\xe9\x38\xb4\x5a\xae\xfb\x8c\x65\x96\x1e\x67\x42\x21\x94\xd2\x0e\x16\x48\x19\x69\x4e\x90\x12\xcb\xf1\x38\x64\x02\xd5\x7e\x64\x25\x6b\x1a\x37\x2a\xed\xe9\xa8\x47\x72\x1b\x2c\xde\xf3\xfe\x27\x29\x86\x18\x3b\xa9\x7c\x06\x64\x4f\xc5\x27\xdc\x3e\x2d\x9f\xd9\xb3\x72\x23\x78\xbe\x5c\x0e\xd9\x19\xa1\x7d\x4e\xde\x93\x65\xff\x83\x2c\x25\xeb\xd1\x09\x63\xb7\x15\xc2\x4a\x6e\x50\xc1\x74\x76\x73\x05\x03\xba\x23\xee\xda\xba\x27\x6f\xcf\xd4\xab\xa7\x8d\xa9\x41\xff\xf3\x12\xec\x88\x25\x27\x5c\x5c\x9e\x40\x19\xb1\x24\x8c\x06\xb2\x9f\x13\xf9\x33\xba\xd9\x8b\x36\xdb\x02\xed\x35\x3e\x43\xdb\x68\x65\xf1\x9b\x91\x0e\xcd\x08\x0c\xbc\xee\xed\x0f\x2d\x5a\x17\x19\x29\xdc\x23\x5c\x4e\xc0\xf0\x2b\xad\x1c\x3e\xba\x2c\x27\x40\x0f\x64\xf3\x9e\x7f\x50\x4d\xeb\x88\xfa\xae\xb0\x0f\xf4\x18\xe4\x12\xf0\x01\xd2\xd7\x29\xc4\x27\xf6\x56\x97\x3b\xb8\x88\xef\x6f\xa1\xcb\x5d\xa4\x9b\xd2\xfb\x75\x35\x43\x51\xfe\x5e\xd7\x99\xe1\x14\x98\xb3\x84\x2e\x81\x42\x7e\x39\x5c\xc3\x13\x01\x66\xdb\x11\x98\x58\x87\xc2\x7b\x7e\x59\x42\x4a\x4d\x4a\x5c\xd2\xc5\xc7\x62\xfc\xaa\xd6\x16\xb3\x9c\x75\xd4\xc2\x04\x68\x61\xf3\x2f\x6a\x2d\x8c\xad\x44\x9d\x75\xf3\xbc\x32\xf8\xf0\xb3\x7d\x0f\x2b\x80\x7e\x6f\xa5\xab\x3a\xf0\x9f\x5b\x34\xbb\x79\x7c\xe7\x91\x81\x8d\xa8\x5b\xb4\x1d\xa3\x5f\x66\x7f\xf1\xe8\x27\x4e\x0f\x5f\x83\x18\x27\x97\xb0\x19\x81\xfe\x4e\x91\x5d\xce\x1d\x6d\xa6\x8f\xb8\x0b\x21\xbd\x7f\x43\x9e\x38\xa0\x5c\xc2\xe3\x10\x17\xd5\xee\xfd\x14\xdd\x95\x56\x1b\x34\x0e\x0d\x5d\x0b\xf0\x6b\x74\xa2\x14\x4e\x84\x90\x6d\xee\x7e\xbd\xcf\x0f\xe9\x89\xf7\x7b\x2f\x1f\x14\x13\x07\x20\x78\x0f\xa7\x5e\xd7\x6d\x42\x98\xc0\x23\x05\x84\x9e\x71\xef\xfb\xdd\x37\xfc\x38\x65\x80\x92\xbe\x0a\xd3\x2d\xe0\x86\xbe\x44\x76\x3f\x6c\xac\x49\x96\xac\x70\x8f\xe7\x24\xfc\x6f\x74\x5d\xf9\x3b\x12\x7a\x08\xf7\xfc\x2b\x11\xf7\x32\xda\xe4\x00\xf7\x02\x5e\x00\x7c\x06\x36\x31\x68\x9b\xbd\xa6\xed\xb0\x8e\x0e\x5f\x08\x82\xb6\xd7\xd8\xb9\xc4\x9e\x53\xd8\x20\xb0\xc0\x92\xc5\xbe\x45\x94\xf0\x75\x2f\x60\x6a\xfe\x33\x65\xb7\xfc\x3d\x8a\x92\x3e\xb2\x7c\x8e\x2e\x4b\xe3\x23\x57\xee\x82\xd6\x79\x3a\x82\x54\x34\x4d\x2d\x0b\xe1\xa4\x56\xf1\xcf\xce\x1b\x28\x2a\x61\x2c\xba\x49\xeb\x96\x17\xbf\xa5\x71\x19\x58\x47\xc9\x73\x27\x5c\x6b\x63\xa7\x6e\xa8\x2d\x8f\x7b\x25\x5b\xe4\x2c\xb0\x81\xae\x7f\x03\x00\x00\xff\xff\xba\x4b\x62\xbd\x7b\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2427, mode: os.FileMode(420), modTime: time.Unix(1518853995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

