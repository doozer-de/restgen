// Code generated by protoc-gen-go.
// source: samplesvc.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	samplesvc.proto

It has these top-level messages:
	DeepPathPathRequest
	DeepPathPathResponse
	DeepHaveAllRequest
	DeepHaveAllResponse
	HaveAll
	Embedded
	Embedded2
	Small
	GetHaveAllRequest
	GetHaveAllResponse
	CreateHaveAllRequest
	CreateHaveAllResponse
	DoNotCreateRequest
	DoNotCreateResponse
	GetSmallRequest
	GetSmallResponse
	PutSmallRequest
	PutSmallResponse
	PostSmallRequest
	PostSmallResponse
	DeleteSmallRequest
	DeleteSmallResponse
	GetLongPathRequest
	GetLongPathResponse
	EmptyRequestMessageRequest
	EmptyRequestMessageResponse
	PageSortFilterRequest
	PageSortFilterResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pbmap "bitbucket.org/doozer-de/restgen/pbmap"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeepPathPathRequest struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *DeepPathPathRequest) Reset()                    { *m = DeepPathPathRequest{} }
func (m *DeepPathPathRequest) String() string            { return proto.CompactTextString(m) }
func (*DeepPathPathRequest) ProtoMessage()               {}
func (*DeepPathPathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeepPathPathRequest) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type DeepPathPathResponse struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *DeepPathPathResponse) Reset()                    { *m = DeepPathPathResponse{} }
func (m *DeepPathPathResponse) String() string            { return proto.CompactTextString(m) }
func (*DeepPathPathResponse) ProtoMessage()               {}
func (*DeepPathPathResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeepPathPathResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeepHaveAllRequest struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *DeepHaveAllRequest) Reset()                    { *m = DeepHaveAllRequest{} }
func (m *DeepHaveAllRequest) String() string            { return proto.CompactTextString(m) }
func (*DeepHaveAllRequest) ProtoMessage()               {}
func (*DeepHaveAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeepHaveAllRequest) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type DeepHaveAllResponse struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *DeepHaveAllResponse) Reset()                    { *m = DeepHaveAllResponse{} }
func (m *DeepHaveAllResponse) String() string            { return proto.CompactTextString(m) }
func (*DeepHaveAllResponse) ProtoMessage()               {}
func (*DeepHaveAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeepHaveAllResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HaveAll struct {
	Id                     uint32               `protobuf:"varint,19,opt,name=Id" json:"Id,omitempty"`
	DoubleField            float64              `protobuf:"fixed64,1,opt,name=DoubleField" json:"DoubleField,omitempty"`
	Float                  float32              `protobuf:"fixed32,2,opt,name=Float" json:"Float,omitempty"`
	Int32                  int32                `protobuf:"varint,3,opt,name=Int32" json:"Int32,omitempty"`
	Int64                  int64                `protobuf:"varint,4,opt,name=Int64" json:"Int64,omitempty"`
	UInt32                 uint32               `protobuf:"varint,5,opt,name=UInt32" json:"UInt32,omitempty"`
	UInt64                 uint64               `protobuf:"varint,6,opt,name=UInt64" json:"UInt64,omitempty"`
	SInt64                 int64                `protobuf:"zigzag64,7,opt,name=SInt64" json:"SInt64,omitempty"`
	SInt32                 int32                `protobuf:"zigzag32,8,opt,name=SInt32" json:"SInt32,omitempty"`
	SFixed                 uint32               `protobuf:"fixed32,9,opt,name=SFixed" json:"SFixed,omitempty"`
	Fixed64                uint64               `protobuf:"fixed64,10,opt,name=Fixed64" json:"Fixed64,omitempty"`
	SFixed32               int32                `protobuf:"fixed32,11,opt,name=SFixed32" json:"SFixed32,omitempty"`
	SFixed64               int64                `protobuf:"fixed64,12,opt,name=SFixed64" json:"SFixed64,omitempty"`
	BoolField              bool                 `protobuf:"varint,13,opt,name=BoolField" json:"BoolField,omitempty"`
	StringField            string               `protobuf:"bytes,14,opt,name=StringField" json:"StringField,omitempty"`
	BytesField             []byte               `protobuf:"bytes,15,opt,name=BytesField,proto3" json:"BytesField,omitempty"`
	Embedded               *Embedded            `protobuf:"bytes,16,opt,name=Embedded" json:"Embedded,omitempty"`
	RepeatedString         []string             `protobuf:"bytes,17,rep,name=RepeatedString" json:"RepeatedString,omitempty"`
	RepeatedBytes          [][]byte             `protobuf:"bytes,20,rep,name=RepeatedBytes,proto3" json:"RepeatedBytes,omitempty"`
	RepeatedEmbedded       []*Embedded          `protobuf:"bytes,18,rep,name=RepeatedEmbedded" json:"RepeatedEmbedded,omitempty"`
	MapStringStringField   map[string]string    `protobuf:"bytes,21,rep,name=MapStringStringField" json:"MapStringStringField,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapStringEmbeddedField map[string]*Embedded `protobuf:"bytes,22,rep,name=MapStringEmbeddedField" json:"MapStringEmbeddedField,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HaveAll) Reset()                    { *m = HaveAll{} }
func (m *HaveAll) String() string            { return proto.CompactTextString(m) }
func (*HaveAll) ProtoMessage()               {}
func (*HaveAll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HaveAll) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HaveAll) GetDoubleField() float64 {
	if m != nil {
		return m.DoubleField
	}
	return 0
}

func (m *HaveAll) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *HaveAll) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *HaveAll) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *HaveAll) GetUInt32() uint32 {
	if m != nil {
		return m.UInt32
	}
	return 0
}

func (m *HaveAll) GetUInt64() uint64 {
	if m != nil {
		return m.UInt64
	}
	return 0
}

func (m *HaveAll) GetSInt64() int64 {
	if m != nil {
		return m.SInt64
	}
	return 0
}

func (m *HaveAll) GetSInt32() int32 {
	if m != nil {
		return m.SInt32
	}
	return 0
}

func (m *HaveAll) GetSFixed() uint32 {
	if m != nil {
		return m.SFixed
	}
	return 0
}

func (m *HaveAll) GetFixed64() uint64 {
	if m != nil {
		return m.Fixed64
	}
	return 0
}

func (m *HaveAll) GetSFixed32() int32 {
	if m != nil {
		return m.SFixed32
	}
	return 0
}

func (m *HaveAll) GetSFixed64() int64 {
	if m != nil {
		return m.SFixed64
	}
	return 0
}

func (m *HaveAll) GetBoolField() bool {
	if m != nil {
		return m.BoolField
	}
	return false
}

func (m *HaveAll) GetStringField() string {
	if m != nil {
		return m.StringField
	}
	return ""
}

func (m *HaveAll) GetBytesField() []byte {
	if m != nil {
		return m.BytesField
	}
	return nil
}

func (m *HaveAll) GetEmbedded() *Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

func (m *HaveAll) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *HaveAll) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *HaveAll) GetRepeatedEmbedded() []*Embedded {
	if m != nil {
		return m.RepeatedEmbedded
	}
	return nil
}

func (m *HaveAll) GetMapStringStringField() map[string]string {
	if m != nil {
		return m.MapStringStringField
	}
	return nil
}

func (m *HaveAll) GetMapStringEmbeddedField() map[string]*Embedded {
	if m != nil {
		return m.MapStringEmbeddedField
	}
	return nil
}

type Embedded struct {
	Id       uint32    `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Text     string    `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
	Embedded *Embedded `protobuf:"bytes,3,opt,name=Embedded" json:"Embedded,omitempty"`
}

func (m *Embedded) Reset()                    { *m = Embedded{} }
func (m *Embedded) String() string            { return proto.CompactTextString(m) }
func (*Embedded) ProtoMessage()               {}
func (*Embedded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Embedded) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Embedded) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Embedded) GetEmbedded() *Embedded {
	if m != nil {
		return m.Embedded
	}
	return nil
}

type Embedded2 struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *Embedded2) Reset()                    { *m = Embedded2{} }
func (m *Embedded2) String() string            { return proto.CompactTextString(m) }
func (*Embedded2) ProtoMessage()               {}
func (*Embedded2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Embedded2) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Small struct {
	Id   uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
}

func (m *Small) Reset()                    { *m = Small{} }
func (m *Small) String() string            { return proto.CompactTextString(m) }
func (*Small) ProtoMessage()               {}
func (*Small) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Small) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Small) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type GetHaveAllRequest struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *GetHaveAllRequest) Reset()                    { *m = GetHaveAllRequest{} }
func (m *GetHaveAllRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHaveAllRequest) ProtoMessage()               {}
func (*GetHaveAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetHaveAllRequest) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type GetHaveAllResponse struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *GetHaveAllResponse) Reset()                    { *m = GetHaveAllResponse{} }
func (m *GetHaveAllResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHaveAllResponse) ProtoMessage()               {}
func (*GetHaveAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetHaveAllResponse) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type CreateHaveAllRequest struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *CreateHaveAllRequest) Reset()                    { *m = CreateHaveAllRequest{} }
func (m *CreateHaveAllRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateHaveAllRequest) ProtoMessage()               {}
func (*CreateHaveAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateHaveAllRequest) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type CreateHaveAllResponse struct {
	HaveAll *HaveAll `protobuf:"bytes,1,opt,name=HaveAll" json:"HaveAll,omitempty"`
}

func (m *CreateHaveAllResponse) Reset()                    { *m = CreateHaveAllResponse{} }
func (m *CreateHaveAllResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateHaveAllResponse) ProtoMessage()               {}
func (*CreateHaveAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateHaveAllResponse) GetHaveAll() *HaveAll {
	if m != nil {
		return m.HaveAll
	}
	return nil
}

type DoNotCreateRequest struct {
}

func (m *DoNotCreateRequest) Reset()                    { *m = DoNotCreateRequest{} }
func (m *DoNotCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DoNotCreateRequest) ProtoMessage()               {}
func (*DoNotCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type DoNotCreateResponse struct {
}

func (m *DoNotCreateResponse) Reset()                    { *m = DoNotCreateResponse{} }
func (m *DoNotCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*DoNotCreateResponse) ProtoMessage()               {}
func (*DoNotCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type GetSmallRequest struct {
	Id     uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Idtest uint32 `protobuf:"varint,2,opt,name=Idtest" json:"Idtest,omitempty"`
}

func (m *GetSmallRequest) Reset()                    { *m = GetSmallRequest{} }
func (m *GetSmallRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSmallRequest) ProtoMessage()               {}
func (*GetSmallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSmallRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetSmallRequest) GetIdtest() uint32 {
	if m != nil {
		return m.Idtest
	}
	return 0
}

type GetSmallResponse struct {
	Small *Small `protobuf:"bytes,1,opt,name=Small" json:"Small,omitempty"`
}

func (m *GetSmallResponse) Reset()                    { *m = GetSmallResponse{} }
func (m *GetSmallResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSmallResponse) ProtoMessage()               {}
func (*GetSmallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSmallResponse) GetSmall() *Small {
	if m != nil {
		return m.Small
	}
	return nil
}

type PutSmallRequest struct {
	Small *Small `protobuf:"bytes,1,opt,name=Small" json:"Small,omitempty"`
}

func (m *PutSmallRequest) Reset()                    { *m = PutSmallRequest{} }
func (m *PutSmallRequest) String() string            { return proto.CompactTextString(m) }
func (*PutSmallRequest) ProtoMessage()               {}
func (*PutSmallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PutSmallRequest) GetSmall() *Small {
	if m != nil {
		return m.Small
	}
	return nil
}

type PutSmallResponse struct {
}

func (m *PutSmallResponse) Reset()                    { *m = PutSmallResponse{} }
func (m *PutSmallResponse) String() string            { return proto.CompactTextString(m) }
func (*PutSmallResponse) ProtoMessage()               {}
func (*PutSmallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type PostSmallRequest struct {
	Small *Small `protobuf:"bytes,1,opt,name=Small" json:"Small,omitempty"`
}

func (m *PostSmallRequest) Reset()                    { *m = PostSmallRequest{} }
func (m *PostSmallRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSmallRequest) ProtoMessage()               {}
func (*PostSmallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PostSmallRequest) GetSmall() *Small {
	if m != nil {
		return m.Small
	}
	return nil
}

type PostSmallResponse struct {
}

func (m *PostSmallResponse) Reset()                    { *m = PostSmallResponse{} }
func (m *PostSmallResponse) String() string            { return proto.CompactTextString(m) }
func (*PostSmallResponse) ProtoMessage()               {}
func (*PostSmallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type DeleteSmallRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
}

func (m *DeleteSmallRequest) Reset()                    { *m = DeleteSmallRequest{} }
func (m *DeleteSmallRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSmallRequest) ProtoMessage()               {}
func (*DeleteSmallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeleteSmallRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteSmallResponse struct {
}

func (m *DeleteSmallResponse) Reset()                    { *m = DeleteSmallResponse{} }
func (m *DeleteSmallResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteSmallResponse) ProtoMessage()               {}
func (*DeleteSmallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type GetLongPathRequest struct {
	Ida uint32 `protobuf:"varint,1,opt,name=Ida" json:"Ida,omitempty"`
	Idb string `protobuf:"bytes,2,opt,name=Idb" json:"Idb,omitempty"`
	Idc uint64 `protobuf:"varint,3,opt,name=Idc" json:"Idc,omitempty"`
	Idd int32  `protobuf:"varint,4,opt,name=Idd" json:"Idd,omitempty"`
	Ide string `protobuf:"bytes,5,opt,name=Ide" json:"Ide,omitempty"`
}

func (m *GetLongPathRequest) Reset()                    { *m = GetLongPathRequest{} }
func (m *GetLongPathRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLongPathRequest) ProtoMessage()               {}
func (*GetLongPathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetLongPathRequest) GetIda() uint32 {
	if m != nil {
		return m.Ida
	}
	return 0
}

func (m *GetLongPathRequest) GetIdb() string {
	if m != nil {
		return m.Idb
	}
	return ""
}

func (m *GetLongPathRequest) GetIdc() uint64 {
	if m != nil {
		return m.Idc
	}
	return 0
}

func (m *GetLongPathRequest) GetIdd() int32 {
	if m != nil {
		return m.Idd
	}
	return 0
}

func (m *GetLongPathRequest) GetIde() string {
	if m != nil {
		return m.Ide
	}
	return ""
}

type GetLongPathResponse struct {
	Idf uint32 `protobuf:"varint,1,opt,name=Idf" json:"Idf,omitempty"`
}

func (m *GetLongPathResponse) Reset()                    { *m = GetLongPathResponse{} }
func (m *GetLongPathResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLongPathResponse) ProtoMessage()               {}
func (*GetLongPathResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetLongPathResponse) GetIdf() uint32 {
	if m != nil {
		return m.Idf
	}
	return 0
}

type EmptyRequestMessageRequest struct {
}

func (m *EmptyRequestMessageRequest) Reset()                    { *m = EmptyRequestMessageRequest{} }
func (m *EmptyRequestMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequestMessageRequest) ProtoMessage()               {}
func (*EmptyRequestMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type EmptyRequestMessageResponse struct {
}

func (m *EmptyRequestMessageResponse) Reset()                    { *m = EmptyRequestMessageResponse{} }
func (m *EmptyRequestMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequestMessageResponse) ProtoMessage()               {}
func (*EmptyRequestMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type PageSortFilterRequest struct {
	Page   *pbmap.Page   `protobuf:"bytes,1,opt,name=Page" json:"Page,omitempty"`
	Sort   *pbmap.Sort   `protobuf:"bytes,2,opt,name=Sort" json:"Sort,omitempty"`
	Filter *pbmap.Filter `protobuf:"bytes,3,opt,name=Filter" json:"Filter,omitempty"`
}

func (m *PageSortFilterRequest) Reset()                    { *m = PageSortFilterRequest{} }
func (m *PageSortFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*PageSortFilterRequest) ProtoMessage()               {}
func (*PageSortFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PageSortFilterRequest) GetPage() *pbmap.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *PageSortFilterRequest) GetSort() *pbmap.Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *PageSortFilterRequest) GetFilter() *pbmap.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type PageSortFilterResponse struct {
	PageLimit   uint64 `protobuf:"varint,1,opt,name=PageLimit" json:"PageLimit,omitempty"`
	PageOffset  uint64 `protobuf:"varint,2,opt,name=PageOffset" json:"PageOffset,omitempty"`
	SortField   string `protobuf:"bytes,3,opt,name=SortField" json:"SortField,omitempty"`
	SortDesc    bool   `protobuf:"varint,4,opt,name=SortDesc" json:"SortDesc,omitempty"`
	FilterQuery string `protobuf:"bytes,5,opt,name=FilterQuery" json:"FilterQuery,omitempty"`
}

func (m *PageSortFilterResponse) Reset()                    { *m = PageSortFilterResponse{} }
func (m *PageSortFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*PageSortFilterResponse) ProtoMessage()               {}
func (*PageSortFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PageSortFilterResponse) GetPageLimit() uint64 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

func (m *PageSortFilterResponse) GetPageOffset() uint64 {
	if m != nil {
		return m.PageOffset
	}
	return 0
}

func (m *PageSortFilterResponse) GetSortField() string {
	if m != nil {
		return m.SortField
	}
	return ""
}

func (m *PageSortFilterResponse) GetSortDesc() bool {
	if m != nil {
		return m.SortDesc
	}
	return false
}

func (m *PageSortFilterResponse) GetFilterQuery() string {
	if m != nil {
		return m.FilterQuery
	}
	return ""
}

func init() {
	proto.RegisterType((*DeepPathPathRequest)(nil), "pb.DeepPathPathRequest")
	proto.RegisterType((*DeepPathPathResponse)(nil), "pb.DeepPathPathResponse")
	proto.RegisterType((*DeepHaveAllRequest)(nil), "pb.DeepHaveAllRequest")
	proto.RegisterType((*DeepHaveAllResponse)(nil), "pb.DeepHaveAllResponse")
	proto.RegisterType((*HaveAll)(nil), "pb.HaveAll")
	proto.RegisterType((*Embedded)(nil), "pb.Embedded")
	proto.RegisterType((*Embedded2)(nil), "pb.Embedded2")
	proto.RegisterType((*Small)(nil), "pb.Small")
	proto.RegisterType((*GetHaveAllRequest)(nil), "pb.GetHaveAllRequest")
	proto.RegisterType((*GetHaveAllResponse)(nil), "pb.GetHaveAllResponse")
	proto.RegisterType((*CreateHaveAllRequest)(nil), "pb.CreateHaveAllRequest")
	proto.RegisterType((*CreateHaveAllResponse)(nil), "pb.CreateHaveAllResponse")
	proto.RegisterType((*DoNotCreateRequest)(nil), "pb.DoNotCreateRequest")
	proto.RegisterType((*DoNotCreateResponse)(nil), "pb.DoNotCreateResponse")
	proto.RegisterType((*GetSmallRequest)(nil), "pb.GetSmallRequest")
	proto.RegisterType((*GetSmallResponse)(nil), "pb.GetSmallResponse")
	proto.RegisterType((*PutSmallRequest)(nil), "pb.PutSmallRequest")
	proto.RegisterType((*PutSmallResponse)(nil), "pb.PutSmallResponse")
	proto.RegisterType((*PostSmallRequest)(nil), "pb.PostSmallRequest")
	proto.RegisterType((*PostSmallResponse)(nil), "pb.PostSmallResponse")
	proto.RegisterType((*DeleteSmallRequest)(nil), "pb.DeleteSmallRequest")
	proto.RegisterType((*DeleteSmallResponse)(nil), "pb.DeleteSmallResponse")
	proto.RegisterType((*GetLongPathRequest)(nil), "pb.GetLongPathRequest")
	proto.RegisterType((*GetLongPathResponse)(nil), "pb.GetLongPathResponse")
	proto.RegisterType((*EmptyRequestMessageRequest)(nil), "pb.EmptyRequestMessageRequest")
	proto.RegisterType((*EmptyRequestMessageResponse)(nil), "pb.EmptyRequestMessageResponse")
	proto.RegisterType((*PageSortFilterRequest)(nil), "pb.PageSortFilterRequest")
	proto.RegisterType((*PageSortFilterResponse)(nil), "pb.PageSortFilterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BigTestService service

type BigTestServiceClient interface {
	// CreateHaveAll tests the put http method with body.
	CreateHaveAll(ctx context.Context, in *CreateHaveAllRequest, opts ...grpc.CallOption) (*CreateHaveAllResponse, error)
	// GetHaveAll should retrieve the HaveAll message with the id given in the path
	// Excluded from HaveAll are the "repeated"-fields (slices). This is not supported at the moment.
	GetHaveAll(ctx context.Context, in *GetHaveAllRequest, opts ...grpc.CallOption) (*GetHaveAllResponse, error)
	// DeepPath tests a query string given a value deeply nested in in structs.
	DeepPath(ctx context.Context, in *DeepHaveAllRequest, opts ...grpc.CallOption) (*DeepHaveAllResponse, error)
	// DoNotCreate is a testcase for a method without an method_map option. Therefore no REST frontend should be generated
	DoNotCreate(ctx context.Context, in *DoNotCreateRequest, opts ...grpc.CallOption) (*DoNotCreateResponse, error)
	// GetSmall tests path parameter.
	GetSmall(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error)
	// GetSmall1 tests path parameter in the middle of a path.
	GetSmall1(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error)
	// PutSmall tests the put http method.
	PutSmall(ctx context.Context, in *PutSmallRequest, opts ...grpc.CallOption) (*PutSmallResponse, error)
	// Flaw: id of the updated resource should be in the URI. An id from the URI should be mapped into posted objects.
	PostSmall(ctx context.Context, in *PostSmallRequest, opts ...grpc.CallOption) (*PostSmallResponse, error)
	// DeleteSmall tests the delete http method.
	DeleteSmall(ctx context.Context, in *DeleteSmallRequest, opts ...grpc.CallOption) (*DeleteSmallResponse, error)
	// GetLongPath is the testcase to assign more than one path parameter to the correct corresponding field.
	GetLongPath(ctx context.Context, in *GetLongPathRequest, opts ...grpc.CallOption) (*GetLongPathResponse, error)
	// GetPathPath tests if a path parameter can also be nested deeply into structs.
	GetPathPath(ctx context.Context, in *DeepPathPathRequest, opts ...grpc.CallOption) (*DeepPathPathResponse, error)
	// EmptyRequestMessage takes an empty request message and returns an empty request message.
	EmptyRequestMessage(ctx context.Context, in *EmptyRequestMessageRequest, opts ...grpc.CallOption) (*EmptyRequestMessageResponse, error)
	// PageSortFilter depends on other messages defined in other protobuf definitions
	// (here: Page-, Sort- and Filtermessage in pbmap/map.proto).
	PageSortFilter(ctx context.Context, in *PageSortFilterRequest, opts ...grpc.CallOption) (*PageSortFilterResponse, error)
}

type bigTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewBigTestServiceClient(cc *grpc.ClientConn) BigTestServiceClient {
	return &bigTestServiceClient{cc}
}

func (c *bigTestServiceClient) CreateHaveAll(ctx context.Context, in *CreateHaveAllRequest, opts ...grpc.CallOption) (*CreateHaveAllResponse, error) {
	out := new(CreateHaveAllResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/CreateHaveAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetHaveAll(ctx context.Context, in *GetHaveAllRequest, opts ...grpc.CallOption) (*GetHaveAllResponse, error) {
	out := new(GetHaveAllResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/GetHaveAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DeepPath(ctx context.Context, in *DeepHaveAllRequest, opts ...grpc.CallOption) (*DeepHaveAllResponse, error) {
	out := new(DeepHaveAllResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/DeepPath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DoNotCreate(ctx context.Context, in *DoNotCreateRequest, opts ...grpc.CallOption) (*DoNotCreateResponse, error) {
	out := new(DoNotCreateResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/DoNotCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetSmall(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error) {
	out := new(GetSmallResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/GetSmall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetSmall1(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error) {
	out := new(GetSmallResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/GetSmall1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PutSmall(ctx context.Context, in *PutSmallRequest, opts ...grpc.CallOption) (*PutSmallResponse, error) {
	out := new(PutSmallResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/PutSmall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PostSmall(ctx context.Context, in *PostSmallRequest, opts ...grpc.CallOption) (*PostSmallResponse, error) {
	out := new(PostSmallResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/PostSmall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DeleteSmall(ctx context.Context, in *DeleteSmallRequest, opts ...grpc.CallOption) (*DeleteSmallResponse, error) {
	out := new(DeleteSmallResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/DeleteSmall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetLongPath(ctx context.Context, in *GetLongPathRequest, opts ...grpc.CallOption) (*GetLongPathResponse, error) {
	out := new(GetLongPathResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/GetLongPath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetPathPath(ctx context.Context, in *DeepPathPathRequest, opts ...grpc.CallOption) (*DeepPathPathResponse, error) {
	out := new(DeepPathPathResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/GetPathPath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) EmptyRequestMessage(ctx context.Context, in *EmptyRequestMessageRequest, opts ...grpc.CallOption) (*EmptyRequestMessageResponse, error) {
	out := new(EmptyRequestMessageResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/EmptyRequestMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PageSortFilter(ctx context.Context, in *PageSortFilterRequest, opts ...grpc.CallOption) (*PageSortFilterResponse, error) {
	out := new(PageSortFilterResponse)
	err := grpc.Invoke(ctx, "/pb.BigTestService/PageSortFilter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BigTestService service

type BigTestServiceServer interface {
	// CreateHaveAll tests the put http method with body.
	CreateHaveAll(context.Context, *CreateHaveAllRequest) (*CreateHaveAllResponse, error)
	// GetHaveAll should retrieve the HaveAll message with the id given in the path
	// Excluded from HaveAll are the "repeated"-fields (slices). This is not supported at the moment.
	GetHaveAll(context.Context, *GetHaveAllRequest) (*GetHaveAllResponse, error)
	// DeepPath tests a query string given a value deeply nested in in structs.
	DeepPath(context.Context, *DeepHaveAllRequest) (*DeepHaveAllResponse, error)
	// DoNotCreate is a testcase for a method without an method_map option. Therefore no REST frontend should be generated
	DoNotCreate(context.Context, *DoNotCreateRequest) (*DoNotCreateResponse, error)
	// GetSmall tests path parameter.
	GetSmall(context.Context, *GetSmallRequest) (*GetSmallResponse, error)
	// GetSmall1 tests path parameter in the middle of a path.
	GetSmall1(context.Context, *GetSmallRequest) (*GetSmallResponse, error)
	// PutSmall tests the put http method.
	PutSmall(context.Context, *PutSmallRequest) (*PutSmallResponse, error)
	// Flaw: id of the updated resource should be in the URI. An id from the URI should be mapped into posted objects.
	PostSmall(context.Context, *PostSmallRequest) (*PostSmallResponse, error)
	// DeleteSmall tests the delete http method.
	DeleteSmall(context.Context, *DeleteSmallRequest) (*DeleteSmallResponse, error)
	// GetLongPath is the testcase to assign more than one path parameter to the correct corresponding field.
	GetLongPath(context.Context, *GetLongPathRequest) (*GetLongPathResponse, error)
	// GetPathPath tests if a path parameter can also be nested deeply into structs.
	GetPathPath(context.Context, *DeepPathPathRequest) (*DeepPathPathResponse, error)
	// EmptyRequestMessage takes an empty request message and returns an empty request message.
	EmptyRequestMessage(context.Context, *EmptyRequestMessageRequest) (*EmptyRequestMessageResponse, error)
	// PageSortFilter depends on other messages defined in other protobuf definitions
	// (here: Page-, Sort- and Filtermessage in pbmap/map.proto).
	PageSortFilter(context.Context, *PageSortFilterRequest) (*PageSortFilterResponse, error)
}

func RegisterBigTestServiceServer(s *grpc.Server, srv BigTestServiceServer) {
	s.RegisterService(&_BigTestService_serviceDesc, srv)
}

func _BigTestService_CreateHaveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).CreateHaveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/CreateHaveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).CreateHaveAll(ctx, req.(*CreateHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetHaveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetHaveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetHaveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetHaveAll(ctx, req.(*GetHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DeepPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DeepPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DeepPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DeepPath(ctx, req.(*DeepHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DoNotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoNotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DoNotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DoNotCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DoNotCreate(ctx, req.(*DoNotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetSmall(ctx, req.(*GetSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetSmall1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetSmall1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetSmall1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetSmall1(ctx, req.(*GetSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PutSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PutSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PutSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PutSmall(ctx, req.(*PutSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PostSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PostSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PostSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PostSmall(ctx, req.(*PostSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DeleteSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DeleteSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DeleteSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DeleteSmall(ctx, req.(*DeleteSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetLongPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetLongPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetLongPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetLongPath(ctx, req.(*GetLongPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetPathPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepPathPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetPathPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetPathPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetPathPath(ctx, req.(*DeepPathPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_EmptyRequestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).EmptyRequestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/EmptyRequestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).EmptyRequestMessage(ctx, req.(*EmptyRequestMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PageSortFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSortFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PageSortFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PageSortFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PageSortFilter(ctx, req.(*PageSortFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BigTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BigTestService",
	HandlerType: (*BigTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHaveAll",
			Handler:    _BigTestService_CreateHaveAll_Handler,
		},
		{
			MethodName: "GetHaveAll",
			Handler:    _BigTestService_GetHaveAll_Handler,
		},
		{
			MethodName: "DeepPath",
			Handler:    _BigTestService_DeepPath_Handler,
		},
		{
			MethodName: "DoNotCreate",
			Handler:    _BigTestService_DoNotCreate_Handler,
		},
		{
			MethodName: "GetSmall",
			Handler:    _BigTestService_GetSmall_Handler,
		},
		{
			MethodName: "GetSmall1",
			Handler:    _BigTestService_GetSmall1_Handler,
		},
		{
			MethodName: "PutSmall",
			Handler:    _BigTestService_PutSmall_Handler,
		},
		{
			MethodName: "PostSmall",
			Handler:    _BigTestService_PostSmall_Handler,
		},
		{
			MethodName: "DeleteSmall",
			Handler:    _BigTestService_DeleteSmall_Handler,
		},
		{
			MethodName: "GetLongPath",
			Handler:    _BigTestService_GetLongPath_Handler,
		},
		{
			MethodName: "GetPathPath",
			Handler:    _BigTestService_GetPathPath_Handler,
		},
		{
			MethodName: "EmptyRequestMessage",
			Handler:    _BigTestService_EmptyRequestMessage_Handler,
		},
		{
			MethodName: "PageSortFilter",
			Handler:    _BigTestService_PageSortFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samplesvc.proto",
}

func init() { proto.RegisterFile("samplesvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0xc9, 0x72, 0xdb, 0x46,
	0x13, 0xfe, 0x41, 0x52, 0x0b, 0x5b, 0x1b, 0x35, 0xa4, 0x64, 0x18, 0xf2, 0x82, 0x42, 0x59, 0x36,
	0xca, 0xfe, 0x7f, 0xe1, 0x17, 0xa9, 0xc8, 0xb2, 0x1c, 0xa7, 0x12, 0x45, 0x94, 0xc2, 0x2a, 0x2f,
	0xf2, 0x50, 0xae, 0x38, 0xbe, 0xb8, 0x40, 0x62, 0x44, 0x33, 0x22, 0x09, 0x04, 0x18, 0x2a, 0xa6,
	0x4f, 0x39, 0xe7, 0x11, 0xf2, 0x02, 0x39, 0xa4, 0x52, 0xa9, 0xca, 0x25, 0x6f, 0x91, 0x5b, 0xde,
	0x21, 0xb7, 0x3c, 0x40, 0x2e, 0xa9, 0x59, 0xb0, 0x92, 0x92, 0x23, 0x1f, 0x54, 0x98, 0xfe, 0xba,
	0xfb, 0xeb, 0x9e, 0x99, 0x9e, 0xe9, 0x11, 0x61, 0x29, 0xb0, 0xfb, 0x5e, 0x8f, 0x04, 0x67, 0xed,
	0x0d, 0xcf, 0x77, 0xa9, 0x8b, 0x72, 0x5e, 0x4b, 0xb3, 0x5a, 0x5d, 0xda, 0x1a, 0xb6, 0x4f, 0x09,
	0xdd, 0x70, 0xfd, 0x8e, 0xe5, 0xb8, 0xee, 0x3b, 0xe2, 0xff, 0xcf, 0x21, 0x96, 0x4f, 0x02, 0xda,
	0x21, 0x03, 0xcb, 0x6b, 0xf5, 0x6d, 0xcf, 0xea, 0xdb, 0x9e, 0x70, 0x32, 0x3e, 0x86, 0xf2, 0x3e,
	0x21, 0xde, 0x91, 0x4d, 0xdf, 0xb0, 0x3f, 0x4c, 0xbe, 0x19, 0x92, 0x80, 0xa2, 0x75, 0x98, 0xf9,
	0xc2, 0x3e, 0x23, 0x9f, 0xf5, 0x7a, 0xaa, 0xa2, 0x2b, 0xe6, 0x5c, 0x75, 0x6e, 0xc3, 0x6b, 0x6d,
	0x48, 0x08, 0x87, 0x3a, 0xe3, 0x36, 0x54, 0xd2, 0xde, 0x81, 0xe7, 0x0e, 0x02, 0x82, 0x16, 0x21,
	0xd7, 0x70, 0xb8, 0xe7, 0x02, 0xce, 0x35, 0x1c, 0xe3, 0x21, 0x20, 0x66, 0x17, 0xfa, 0x5f, 0x2e,
	0xc8, 0xba, 0x48, 0x31, 0x72, 0x3e, 0x27, 0xc6, 0x6f, 0x33, 0x11, 0x9d, 0xd4, 0x95, 0x43, 0x1d,
	0xd2, 0x61, 0x6e, 0xdf, 0x1d, 0xb6, 0x7a, 0xe4, 0xa0, 0x4b, 0x7a, 0xc2, 0x49, 0xc1, 0x49, 0x08,
	0x55, 0x60, 0xea, 0xa0, 0xe7, 0xda, 0x54, 0xcd, 0xe9, 0x8a, 0x99, 0xc3, 0x42, 0x60, 0x68, 0x63,
	0x40, 0x6b, 0x55, 0x35, 0xaf, 0x2b, 0xe6, 0x14, 0x16, 0x82, 0x44, 0xb7, 0xb7, 0xd4, 0x82, 0xae,
	0x98, 0x79, 0x2c, 0x04, 0xb4, 0x0a, 0xd3, 0x2f, 0x84, 0xf1, 0x14, 0x8f, 0x2b, 0xa5, 0x10, 0xdf,
	0xde, 0x52, 0xa7, 0x75, 0xc5, 0x2c, 0x60, 0x29, 0x31, 0xbc, 0x29, 0xf0, 0x19, 0x5d, 0x31, 0x11,
	0x96, 0x52, 0x88, 0xd7, 0xaa, 0xea, 0xac, 0xae, 0x98, 0xcb, 0x58, 0x4a, 0x1c, 0x3f, 0xe8, 0xbe,
	0x25, 0x8e, 0x5a, 0xd4, 0x15, 0x73, 0x06, 0x4b, 0x09, 0xa9, 0x30, 0xc3, 0x07, 0xdb, 0x5b, 0x2a,
	0xe8, 0x8a, 0x39, 0x8d, 0x43, 0x11, 0x69, 0x30, 0x2b, 0x6c, 0x6a, 0x55, 0x75, 0x4e, 0x57, 0xcc,
	0x25, 0x1c, 0xc9, 0xb1, 0x6e, 0x7b, 0x4b, 0x9d, 0xd7, 0x15, 0xb3, 0x84, 0x23, 0x19, 0x5d, 0x83,
	0xe2, 0x9e, 0xeb, 0xf6, 0xc4, 0x5a, 0x2d, 0xe8, 0x8a, 0x39, 0x8b, 0x63, 0x80, 0xad, 0x65, 0x93,
	0xfa, 0xdd, 0x41, 0x47, 0xe8, 0x17, 0x75, 0xc5, 0x2c, 0xe2, 0x24, 0x84, 0x6e, 0x00, 0xec, 0x8d,
	0x28, 0x09, 0x84, 0xc1, 0x92, 0xae, 0x98, 0xf3, 0x38, 0x81, 0x20, 0x13, 0x66, 0xeb, 0xfd, 0x16,
	0x71, 0x1c, 0xe2, 0xa8, 0x25, 0xbe, 0xf1, 0xf3, 0x6c, 0xe3, 0x43, 0x0c, 0x47, 0x5a, 0x74, 0x1b,
	0x16, 0x31, 0xf1, 0x88, 0x4d, 0x89, 0x23, 0x02, 0xa8, 0xcb, 0x7a, 0xde, 0x2c, 0xe2, 0x0c, 0x8a,
	0x6e, 0xc1, 0x42, 0x88, 0xf0, 0x38, 0x6a, 0x45, 0xcf, 0x9b, 0xf3, 0x38, 0x0d, 0xa2, 0x1d, 0x28,
	0x85, 0x40, 0x14, 0x1f, 0xe9, 0xf9, 0xb1, 0xf8, 0x63, 0x56, 0xe8, 0x2b, 0xa8, 0x3c, 0xb1, 0x3d,
	0x11, 0x2c, 0x39, 0xf9, 0x15, 0xee, 0xbd, 0x9e, 0x28, 0xdb, 0x8d, 0x49, 0x76, 0xf5, 0x01, 0xf5,
	0x47, 0x78, 0x22, 0x05, 0x7a, 0x0d, 0xab, 0x11, 0x1e, 0xc6, 0x13, 0xe4, 0xab, 0x9c, 0xfc, 0xce,
	0x44, 0xf2, 0x94, 0xa5, 0xa0, 0x3f, 0x87, 0x46, 0x3b, 0x84, 0xab, 0xe7, 0xe6, 0x84, 0x4a, 0x90,
	0x3f, 0x25, 0x23, 0x7e, 0x20, 0x8a, 0x98, 0x0d, 0x59, 0x71, 0x9f, 0xd9, 0xbd, 0x21, 0xe1, 0x07,
	0xa1, 0x88, 0x85, 0xb0, 0x9b, 0xdb, 0x51, 0xb4, 0x2f, 0x61, 0xed, 0x82, 0xf8, 0x13, 0xa8, 0x8c,
	0x24, 0x55, 0x76, 0x91, 0x63, 0x62, 0xe3, 0x65, 0x5c, 0x0f, 0xd9, 0x53, 0x8d, 0x10, 0x14, 0x8e,
	0xc9, 0x5b, 0x2a, 0xb3, 0xe1, 0xe3, 0x54, 0xfd, 0xe4, 0x2f, 0xaa, 0x1f, 0x63, 0x0d, 0x8a, 0xe1,
	0xb8, 0x3a, 0x76, 0x61, 0xdc, 0x83, 0xa9, 0x66, 0xdf, 0x8e, 0x6e, 0x8b, 0x0b, 0x63, 0x1a, 0xbb,
	0xb0, 0x7c, 0x48, 0xe8, 0x87, 0x5d, 0x60, 0x0f, 0x01, 0x25, 0x7d, 0xe5, 0xfd, 0xf5, 0x2f, 0x9d,
	0x1f, 0x41, 0xe5, 0x73, 0x9f, 0x55, 0xe3, 0x87, 0xc5, 0xfe, 0x04, 0x56, 0x32, 0xee, 0x97, 0x0b,
	0x5f, 0x01, 0xb4, 0xef, 0x3e, 0x75, 0xa9, 0x20, 0x91, 0xc1, 0x8d, 0x15, 0x28, 0xa7, 0x50, 0xc1,
	0x69, 0x3c, 0x80, 0xa5, 0x43, 0x42, 0xf9, 0xa2, 0x86, 0x69, 0x66, 0xd7, 0x76, 0x15, 0xa6, 0x1b,
	0x0e, 0x25, 0x81, 0x58, 0xdd, 0x05, 0x2c, 0x25, 0xa3, 0x06, 0xa5, 0xd8, 0x55, 0xa6, 0x78, 0x53,
	0x6e, 0x90, 0x4c, 0xb0, 0xc8, 0x12, 0x14, 0x16, 0x02, 0x37, 0xaa, 0xb0, 0x74, 0x34, 0x4c, 0xc7,
	0x7b, 0xaf, 0x0f, 0x82, 0x52, 0xec, 0x23, 0xf3, 0xae, 0x41, 0xe9, 0xc8, 0x0d, 0x2e, 0x49, 0x54,
	0x86, 0xe5, 0x84, 0x93, 0x64, 0xba, 0xc5, 0x1a, 0x5d, 0x8f, 0x50, 0x72, 0xd1, 0x22, 0xf0, 0xe5,
	0x4b, 0x5a, 0x49, 0xe7, 0x01, 0xaf, 0x93, 0xc7, 0xee, 0xa0, 0x93, 0x6c, 0xc5, 0x25, 0xc8, 0x37,
	0x1c, 0x5b, 0x7a, 0xb3, 0xa1, 0x40, 0x5a, 0xb2, 0x3c, 0xd9, 0x50, 0x20, 0x6d, 0x7e, 0x18, 0x0a,
	0x0c, 0x69, 0x0b, 0xc4, 0xe1, 0x1d, 0x6a, 0x8a, 0x21, 0x8e, 0x40, 0x08, 0x6f, 0x4e, 0xdc, 0x8b,
	0x18, 0x77, 0xa0, 0x9c, 0x8a, 0x27, 0x97, 0x9d, 0x1b, 0x9e, 0xc4, 0x01, 0x4f, 0x8c, 0x6b, 0xa0,
	0xd5, 0xfb, 0x1e, 0x1d, 0xc9, 0x94, 0x9e, 0x90, 0x20, 0xb0, 0x3b, 0x51, 0x31, 0x5c, 0x87, 0xb5,
	0x89, 0x5a, 0x39, 0xab, 0xef, 0x14, 0x58, 0x39, 0xb2, 0x3b, 0xa4, 0xe9, 0xfa, 0xf4, 0xa0, 0xdb,
	0xa3, 0xc4, 0x8f, 0x97, 0xb8, 0xc0, 0x14, 0x89, 0xfa, 0x63, 0xef, 0x12, 0x06, 0x61, 0xae, 0x60,
	0x06, 0xcc, 0x4b, 0xde, 0x1f, 0xa1, 0x01, 0x83, 0x30, 0x57, 0xa0, 0x75, 0x98, 0x16, 0x94, 0xf2,
	0x1e, 0x58, 0x90, 0x26, 0x32, 0x8e, 0x54, 0x1a, 0xbf, 0x2a, 0xb0, 0x9a, 0x4d, 0x41, 0x4e, 0xf6,
	0x1a, 0x14, 0x99, 0xe6, 0x71, 0xb7, 0xdf, 0xa5, 0x3c, 0x91, 0x02, 0x8e, 0x01, 0xd6, 0xc9, 0x98,
	0xf0, 0xec, 0xe4, 0x24, 0x20, 0x22, 0x8d, 0x02, 0x4e, 0x20, 0xcc, 0x5b, 0x70, 0xb2, 0xfb, 0x3a,
	0xcf, 0x57, 0x36, 0x06, 0x78, 0x8f, 0x75, 0x7d, 0xba, 0x4f, 0x82, 0x36, 0xdf, 0x88, 0x59, 0x1c,
	0xc9, 0xac, 0x8b, 0x8a, 0x4c, 0x9e, 0x0f, 0x89, 0x3f, 0x92, 0xbb, 0x92, 0x84, 0xaa, 0x3f, 0x2d,
	0xc0, 0xe2, 0x5e, 0xb7, 0x73, 0x4c, 0x02, 0xda, 0x24, 0xfe, 0x59, 0xb7, 0x4d, 0xd0, 0x6b, 0x58,
	0x48, 0x1d, 0x66, 0xa4, 0xb2, 0xaa, 0x9c, 0x74, 0x3d, 0x68, 0x57, 0x27, 0x68, 0xe4, 0x86, 0x5c,
	0xfd, 0xfe, 0xef, 0x5f, 0x7e, 0xcf, 0x95, 0x21, 0x7f, 0xf4, 0xe2, 0x18, 0x15, 0xad, 0x37, 0xf6,
	0x19, 0xb1, 0x7b, 0x3d, 0xcb, 0x50, 0xee, 0xa2, 0x9f, 0xf3, 0x00, 0xf1, 0x55, 0x85, 0x56, 0x18,
	0xc9, 0xd8, 0xb5, 0xa7, 0xad, 0x66, 0x61, 0x49, 0xfc, 0x57, 0x8e, 0x33, 0xff, 0x99, 0x83, 0xfc,
	0x61, 0x3d, 0x49, 0xad, 0xfd, 0x91, 0x3b, 0x25, 0xa3, 0xcd, 0x47, 0x61, 0x1b, 0x6b, 0x38, 0xb7,
	0x4f, 0xc9, 0xa8, 0x1a, 0xc9, 0x89, 0x87, 0x18, 0x53, 0xd4, 0x22, 0x05, 0x7f, 0x85, 0x31, 0x68,
	0x2b, 0xf6, 0x65, 0x8f, 0x21, 0x06, 0x7d, 0x94, 0x84, 0xb6, 0xb7, 0x18, 0xb4, 0x1d, 0x41, 0x2f,
	0x22, 0xb3, 0xfb, 0x29, 0x4c, 0xd8, 0xed, 0x44, 0x58, 0x33, 0xc2, 0x1e, 0xa4, 0x30, 0xe1, 0xbb,
	0xf9, 0xff, 0x18, 0xe4, 0x8f, 0x23, 0x0e, 0xc6, 0xf3, 0x90, 0x0f, 0x26, 0x8e, 0x56, 0x33, 0xa6,
	0x92, 0xa1, 0x96, 0x81, 0xa5, 0x75, 0x3c, 0x9f, 0xe8, 0x61, 0xc5, 0xf1, 0x78, 0x52, 0x89, 0x56,
	0xcd, 0x35, 0xf1, 0xdc, 0x12, 0x2f, 0xa9, 0x1f, 0x15, 0x98, 0x0d, 0x1f, 0xe0, 0x88, 0x6f, 0xcb,
	0xf8, 0x33, 0x5b, 0xbb, 0x32, 0x86, 0xcb, 0xfd, 0xfa, 0x9a, 0x6f, 0x97, 0x23, 0x76, 0x0b, 0x2c,
	0x87, 0x10, 0xcf, 0xb3, 0xe9, 0x1b, 0x4b, 0x7b, 0x7e, 0x4a, 0x46, 0x51, 0xb8, 0xb0, 0x81, 0x7e,
	0xe0, 0xa0, 0xe1, 0xec, 0x76, 0x07, 0x14, 0x7d, 0xca, 0x5e, 0xe0, 0x51, 0xc7, 0x90, 0xb9, 0x8e,
	0x35, 0x16, 0x99, 0xeb, 0x84, 0xd6, 0xf2, 0x1f, 0xf4, 0x14, 0x66, 0xc3, 0x0e, 0x81, 0xca, 0xb2,
	0x02, 0x93, 0xb7, 0xac, 0x56, 0x49, 0x83, 0xd2, 0xf1, 0x0a, 0x9f, 0xe4, 0x72, 0x38, 0xc9, 0x80,
	0x29, 0xad, 0xdd, 0xae, 0x83, 0x5e, 0x42, 0x31, 0x34, 0xde, 0xbc, 0x0c, 0xa1, 0xce, 0x09, 0x35,
	0x41, 0x58, 0x8e, 0x09, 0x59, 0x1b, 0xb3, 0x06, 0x76, 0x9f, 0xb0, 0x4c, 0xc3, 0x16, 0x23, 0x88,
	0x33, 0x4d, 0x4a, 0x10, 0x8f, 0x75, 0xa1, 0x28, 0x53, 0x76, 0x2e, 0x67, 0x24, 0x31, 0x3b, 0x95,
	0x18, 0x8a, 0x51, 0xa7, 0x41, 0xc2, 0x37, 0xd3, 0xad, 0xb4, 0x95, 0x0c, 0x2a, 0x29, 0x55, 0x4e,
	0x89, 0xa0, 0x70, 0xf4, 0xac, 0x99, 0xe6, 0x7c, 0x05, 0x73, 0x89, 0x16, 0x14, 0xd6, 0x4e, 0xb6,
	0x73, 0x85, 0xb5, 0x33, 0xde, 0xab, 0x34, 0xce, 0x5c, 0x81, 0xe9, 0xfd, 0xfa, 0xe3, 0xfa, 0x71,
	0x3d, 0xb5, 0xb2, 0xdf, 0xc2, 0x5c, 0xa2, 0xaf, 0xa0, 0xf0, 0xba, 0xc8, 0x34, 0x36, 0xc1, 0x3d,
	0xa1, 0x01, 0x19, 0xf7, 0x39, 0xf7, 0xa6, 0x58, 0xe1, 0xbb, 0x56, 0x87, 0xd0, 0x7e, 0xd7, 0xb1,
	0x6c, 0xc6, 0x6d, 0x5b, 0x2d, 0xf6, 0x69, 0x59, 0x6d, 0xf6, 0x69, 0x5b, 0x0e, 0xfb, 0x38, 0x16,
	0x61, 0x1f, 0x82, 0xde, 0xf1, 0xc0, 0xe1, 0x7f, 0xa3, 0x28, 0x2a, 0xfc, 0xcc, 0x7f, 0xb7, 0x9a,
	0x3a, 0xae, 0x90, 0xa1, 0x77, 0x78, 0xe8, 0xaa, 0x08, 0x7d, 0x2f, 0x3a, 0x12, 0xfc, 0x58, 0xec,
	0x9e, 0x7f, 0x22, 0x1a, 0x0e, 0x0a, 0xa0, 0x3c, 0xa1, 0x0b, 0xa2, 0x1b, 0xe2, 0x65, 0x7a, 0x5e,
	0xf3, 0xd4, 0x6e, 0x9e, 0xab, 0x97, 0x19, 0xad, 0xf1, 0x8c, 0x56, 0x44, 0x46, 0x8b, 0x16, 0x61,
	0xa6, 0xbe, 0x30, 0xb5, 0xd0, 0x09, 0x2c, 0xa6, 0xfb, 0x1a, 0xe2, 0xf7, 0xfe, 0xc4, 0x76, 0xab,
	0x69, 0x93, 0x54, 0x32, 0xca, 0x75, 0x1e, 0xe5, 0x8a, 0x88, 0x52, 0xb2, 0x3c, 0xbb, 0x43, 0x02,
	0xd7, 0xa7, 0x27, 0xdc, 0xca, 0xd2, 0xf4, 0x1f, 0x44, 0xcd, 0x2b, 0x9b, 0x08, 0xac, 0x96, 0x1d,
	0x90, 0xd7, 0x43, 0xbf, 0x6b, 0x69, 0xc5, 0xe8, 0x27, 0x88, 0xbd, 0x8d, 0x57, 0xff, 0x7d, 0xdf,
	0x4f, 0x0f, 0x91, 0xb1, 0xe5, 0xb5, 0x5a, 0xd3, 0xfc, 0xe7, 0x87, 0xda, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x1a, 0x51, 0x5c, 0xc6, 0x10, 0x00, 0x00,
}
