// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xaa\xc3\x42\x5a\x28\x74\xcf\x29\x7c\xe8\xa6\x5b\x6f\xb0\xcd\x22\x6b\x27\xbb\x87\x20\x28\x68\x69\x2c\xb1\x91\x49\x85\xa4\xec\x78\x05\xfe\xf7\x62\x28\x59\xb1\xe3\x22\x41\xd1\x9e\x22\xce\xc7\x9b\x99\xc7\xc7\x71\x1a\x91\x3f\x88\x12\xa1\xeb\xf8\x8d\x30\x25\xba\xeb\xde\xe0\x3d\x63\x72\xdd\x68\xe3\x20\x61\x51\xac\xd0\x4d\x2a\xe7\x9a\x98\x45\xb1\xd4\x13\xa9\x5b\x27\x6b\x3a\xa0\xca\x75\x21\x55\x39\xf9\xcb\x6a\x45\x86\xd5\xda\xc5\x8c\x45\x71\xd7\xf1\x99\x1e\xc1\xc8\xb3\x94\x6e\xd9\xe6\x0f\xe8\xb8\x36\xe5\xa4\xd0\xfa\x07\x9a\xb3\x02\x27\x06\xad\x23\x7f\xa9\x6b\xa1\xca\xe0\x7c\x9a\x50\xc1\x5c\x2b\x87\x4f\xe4\xeb\x3a\x23\x54\x89\xc0\x2f\x43\x4b\xd6\x7b\x16\x85\x12\x01\xb9\xeb\xce\x00\x55\xe1\x3d\x4b\x19\xdb\x08\x43\x1d\x2f\x85\xc5\xdb\xf9\x25\x4c\x81\xc2\x3e\xf4\xa7\x10\xfd\x27\x4c\xa1\xef\x9f\xff\x26\x6d\x2e\x4c\x41\x69\x6e\xd7\x20\x7c\x5d\x5c\x0b\x23\xd6\xe8\xd0\x80\x75\xa6\xcd\x1d\x74\x2c\xfa\x8c\x3b\x00\x3a\x4b\x55\xc2\x64\x02\xdf\x2b\x99\x57\xf0\x80\x3b\x16\xfd\x2e\xb1\x2e\x0e\x5c\xa5\x46\x0b\x4e\xc3\x36\x84\xac\x82\x57\x2a\x10\x50\xea\x01\x90\x45\x37\x54\xe9\x20\xc7\x56\xba\xad\x0b\xa8\xc4\x06\x61\x5b\x09\x07\xd4\x0a\xf3\x8c\xb1\x55\xab\x72\x48\x2c\xbc\x9f\xa1\x42\x23\x1c\x16\x0b\x34\x1b\x99\x63\x0a\x33\x74\x9f\x84\x2a\x6a\x34\xf6\x46\xcf\xb1\x94\xd6\xa1\x49\x52\xb8\xbb\x27\x36\xf9\xde\x42\xed\x1b\x74\xad\x51\x2f\x3d\x1d\x8c\x9c\xce\xd0\x5d\x89\xa6\xc1\xe2\x0a\x5d\xa5\x8b\x9e\xdc\x0e\xfa\xd3\x79\xe0\x6f\xfe\x71\x71\xd3\x9f\xbd\x8f\x33\xb8\x16\xae\xea\x1d\x9f\x84\x59\x6b\x25\x7f\x60\x41\x21\x64\x0f\x01\x43\x6f\xe7\x60\x79\xd7\xf1\x2f\x62\x8d\xde\x83\xcf\x0e\xaf\x2a\xf2\x34\xe3\xeb\x23\x0e\xd7\x96\xa4\x7b\xba\x9e\xc7\x19\xee\xf7\x0d\x8c\x05\xba\x8f\xc6\x68\x33\xf4\x93\x54\x10\x48\x38\xb4\xa5\x80\x74\x22\x68\xb9\x82\x0a\xa6\x53\x50\xb2\xa6\xe3\xbe\xd4\x6a\x3d\x64\xac\x92\xf8\x30\x13\x72\xa1\x94\x76\xb0\x44\xca\x88\x53\x1a\x29\xb2\x1c\x0f\x43\xa6\x50\x8d\x2d\x2b\x59\x53\xbb\x41\x69\x2f\x5b\x3d\x90\xdb\xcc\x34\xf9\xde\xda\x75\x7c\xf8\x24\xd5\x10\x6b\x47\xe8\x27\xc3\x8c\x74\x7c\xc1\xed\xcb\x12\x89\x3d\x81\xcb\xe0\x75\xb8\x14\x92\x13\x52\x87\x9c\x74\x20\xcc\xfe\x03\x61\x4a\xd6\xd9\x11\x6b\x37\x15\x42\x29\x37\xa8\x60\x36\xbf\xbe\x80\xfd\x74\x07\xfc\xb5\xf5\x40\xe0\xc8\xd6\xbb\x97\x85\xa9\xc0\x01\x37\xe7\x60\x33\x16\x1d\xf1\x71\x7e\x34\x4e\xc6\x22\x9f\xed\x49\x7f\x4d\xec\xaf\xe8\x67\x14\x6f\x92\xbb\x27\x18\xf6\x11\xbf\xe8\xff\x66\xb0\x05\xda\x89\x7c\x8e\xb6\xd1\xca\xe2\x77\x23\x1d\x9a\x0c\x0c\xbc\x1f\xec\x8f\x2d\x5a\x97\xf6\xb2\x7d\x84\xf3\x29\x01\x5e\xaa\xa6\x75\xc4\x7f\x8f\xdc\x79\x7a\x15\x72\x05\xf8\x08\xf1\xfb\x18\xc2\x5b\xfb\xa0\x8b\x1d\x9c\x85\x87\xb8\xd4\xc5\x2e\x70\x4e\xe9\xc3\xde\x9a\xa3\x28\x7e\xad\xeb\xc4\x70\x0a\x4c\x59\x44\x37\x41\x21\x3f\x3d\xdf\xc5\x0b\x25\xd2\x00\x19\x6c\x33\x30\x01\x8c\x72\x06\xa6\x59\x44\xba\x8d\x0a\x5c\x91\x04\x02\x22\xbf\xa8\xb5\xc5\x24\x65\x3d\xc1\x30\x05\xda\xee\xfc\x56\xad\x85\xb1\x95\xa8\x93\xbe\xa9\x77\x06\x1f\xff\x97\xe2\xcf\x5b\x81\xbe\xb7\xd2\x55\x3d\x0d\x5f\x5b\x34\xbb\x45\x78\xfa\x81\x8b\x8d\xa8\x5b\xb4\x44\x84\xe1\xb7\xf3\x3f\x78\xf0\x27\x04\x37\xde\x6f\x88\x93\x2b\xd8\x64\xa0\x1f\x28\xb2\xcf\xb9\xa3\x65\xf5\x19\x77\xde\xc7\xf7\xbf\x90\x27\x74\x29\x57\xf0\xb4\x8f\x0b\xe2\xef\xba\x19\xba\x0b\xad\x36\x68\x1c\x1a\xba\x20\xe0\x57\xe8\x44\x21\x9c\xf0\x3e\xd9\xdc\xfd\x7c\x9f\x3e\xa7\x47\x5d\x37\x7a\xf9\x5e\x3c\xa1\x01\x1a\xef\xf1\xd8\xeb\xfa\xe5\x08\x53\x78\xa2\x00\x3f\xd0\xde\x75\xc3\x3a\xdc\x7f\x1c\x33\x40\x49\xdf\x84\xe9\x77\x72\x43\x3f\x4e\x76\x6c\x36\x60\x92\x85\xe8\x3d\x25\xe1\x5f\x4f\xd7\xc3\xdf\x91\xe6\xbd\xbf\xe7\xdf\x88\xb8\xb7\xa7\x8d\x9e\xc7\x3d\x83\x37\x06\x3e\x19\x36\x32\x68\x9b\x51\xdd\x96\x1f\xbc\x6f\x7e\xf4\xf6\x46\xb1\x9d\x6a\xed\x4d\xa9\xed\x95\xe6\x59\xb4\x1c\x6b\x05\x41\x5f\x0d\x72\xa6\x2e\xfe\x33\xf6\x96\x7f\x42\x51\xd0\xaf\x30\x5f\xa0\x4b\xe2\xb0\x25\x94\x3b\xa3\x7d\x1f\x67\x10\x8b\xa6\xa9\x65\x2e\x9c\xd4\xaa\xff\x67\x29\x0d\xe3\x3b\x8a\x5e\x38\xe1\x5a\x9b\x10\x74\xdf\xca\x96\x87\x65\x92\x2c\x53\xe6\xd9\x9e\xad\xbf\x03\x00\x00\xff\xff\x5f\xbf\xf2\x46\xac\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2476, mode: os.FileMode(436), modTime: time.Unix(1483989997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

