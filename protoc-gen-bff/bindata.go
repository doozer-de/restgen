// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xc1\x6e\xe3\x36\x10\x3d\x8b\x5f\x31\xd5\x61\x21\x2d\x14\xba\xe7\x14\x3e\x74\xd3\xad\x37\xd8\x66\x91\xb5\x93\xdd\x43\x10\x14\xb4\x34\x96\xd8\xc8\xa4\x42\x52\x76\xbc\x02\xff\xbd\x18\x4a\x56\xec\xb8\x48\x50\xb4\xa7\x88\x9c\x99\xc7\x37\x8f\x8f\xe3\x34\x22\x7f\x10\x25\x42\xd7\xf1\x1b\x61\x4a\x74\xd7\xfd\x86\xf7\x8c\xc9\x75\xa3\x8d\x83\x84\x45\xb1\x42\x37\xa9\x9c\x6b\x62\x16\xc5\x52\x4f\xa4\x6e\x9d\xac\x69\x81\x2a\xd7\x85\x54\xe5\xe4\x2f\xab\x15\x6d\xac\xd6\x2e\x66\x2c\x8a\xbb\x8e\xcf\xf4\x08\x46\x91\x52\xba\xaa\x5d\xf2\x5c\xaf\x27\x85\xd6\x3f\xd0\x9c\x15\x38\x31\x68\x5d\x08\xea\x5a\xa8\x92\x6b\x53\x4e\x9e\x26\x74\x5a\xae\x95\xc3\x27\x8a\x75\x9d\x11\xaa\x44\xe0\x97\x81\x8f\xf5\x9e\x45\x01\x3f\xc0\x76\xdd\x19\xa0\x2a\xbc\x67\x29\x63\x1b\x61\x88\xee\x52\x58\xbc\x9d\x5f\xc2\x14\x28\xed\x43\xbf\x0a\xd9\x7f\xc2\x14\x7a\xf2\xfc\x37\x69\x73\x61\x0a\x2a\x73\xbb\x06\xe1\xeb\xe2\x5a\x18\xb1\x46\x87\x06\xac\x33\x6d\xee\xa0\x63\xd1\x67\xdc\x01\xd0\x5a\xaa\x12\x26\x13\xf8\x5e\xc9\xbc\x82\x07\xdc\xb1\xe8\x77\x89\x75\x71\x10\x2a\x35\x5a\x70\x1a\xb6\x21\x65\x15\xa2\x52\x81\x80\x52\x0f\x80\x2c\xba\xa1\x93\x0e\x6a\x6c\xa5\xdb\xba\x80\x4a\x6c\x10\xb6\x95\x70\x40\x54\x98\x67\x8c\xad\x5a\x95\x43\x62\xe1\xfd\x0c\x15\x1a\xe1\xb0\x58\xa0\xd9\xc8\x1c\x53\x98\xa1\xfb\x24\x54\x51\xa3\xb1\x37\x7a\x8e\xa5\xb4\x0e\x4d\x92\xc2\xdd\x3d\xa9\xc9\xf7\x3b\x44\xdf\xa0\x6b\x8d\x7a\x19\xe9\x60\xd4\x74\x86\xee\x4a\x34\x0d\x16\x57\xe8\x2a\x5d\xf4\xe2\x76\xd0\xaf\xce\x83\x7e\xf3\x8f\x8b\x9b\x7e\xed\x7d\x9c\xc1\xb5\x70\x55\x1f\xf8\x24\xcc\x5a\x2b\xf9\x03\x0b\x4a\xa1\xfd\x90\x30\x70\x3b\x07\xcb\xbb\x8e\x7f\x11\x6b\xf4\x1e\x7c\x76\x78\x55\x91\xa7\x1e\x5f\x6f\x71\xb8\xb6\x24\xdd\xcb\xf5\xdc\xce\x70\xbf\x6f\x60\x2c\xd0\x7d\x34\x46\x9b\x81\x4f\x52\x41\x10\xe1\x70\x2f\x05\xa4\x15\x41\xcb\x15\x54\x30\x9d\x82\x92\x35\x2d\xf7\x47\xad\xd6\x43\xc5\x2a\x89\x0f\x2b\x21\x17\x4a\x69\x07\x4b\xa4\x8a\x38\xa5\x96\x22\xcb\xf1\x30\x65\x0a\xd5\x48\x59\xc9\x9a\xe8\x06\xa7\xbd\xa4\x7a\x60\xb7\x99\x69\xf2\xfd\x6e\xd7\xf1\xe1\x93\x5c\x43\xaa\x1d\xa1\x9f\x34\x33\xca\xf1\x05\xb7\x2f\x8f\x48\xec\x09\x5c\x06\xaf\xc3\xa5\x90\x9c\x88\x3a\xd4\xa4\x83\x60\xf6\x1f\x04\x53\xb2\xce\x8e\x54\xbb\xa9\x10\x4a\xb9\x41\x05\xb3\xf9\xf5\x05\xec\xbb\x3b\xd0\xaf\xad\x07\x01\x47\xb5\xde\xbd\x3c\x98\x0e\x38\xd0\xe6\x1c\x6c\xc6\xa2\x23\x3d\xce\x8f\xda\xc9\x58\xe4\xb3\xbd\xe8\xaf\x99\xfd\x15\xff\x8c\xe6\x4d\x72\xf7\x04\xc3\x3c\xe2\x17\xfd\xdf\x0c\xb6\x40\x03\x91\xcf\xd1\x36\x5a\x59\xfc\x6e\xa4\x43\x93\x81\x81\xf7\xc3\xfe\x63\x8b\xd6\xa5\xbd\x6d\x1f\xe1\x7c\x4a\x80\x97\xaa\x69\x1d\xe9\xdf\x23\x77\x9e\x5e\x85\x5c\x01\x3e\x42\xfc\x3e\x86\xf0\xd6\x3e\xe8\x62\x07\x67\xe1\x21\x2e\x75\xb1\x0b\x9a\x53\xf9\x30\xb7\xe6\x28\x8a\x5f\xeb\x3a\x31\x9c\x12\x53\x16\xd1\x4d\x50\xca\x4f\xcf\x77\xf1\xc2\x89\xd4\x40\x06\xdb\x0c\x4c\x00\xa3\x9a\x41\x69\x16\x91\x6f\xa3\x02\x57\x64\x81\x80\xc8\x2f\x6a\x6d\x31\x49\x59\x2f\x30\x4c\x81\x46\x3b\xbf\x55\x6b\x61\x6c\x25\xea\xa4\x27\xf5\xce\xe0\xe3\xff\x72\xf8\xf3\x54\xa0\xef\xad\x74\x55\x2f\xc3\xd7\x16\xcd\x6e\x11\x9e\x7e\xd0\x62\x23\xea\x16\x2d\x09\x61\xf8\xed\xfc\x0f\x1e\xe2\x09\xc1\x8d\xf7\x1b\xf2\xe4\x0a\x36\x19\xe8\x07\xca\xec\x6b\xee\x68\x58\x7d\xc6\x9d\xf7\xf1\xfd\x2f\x14\x09\x2c\xe5\x0a\x9e\xf6\x79\xc1\xfc\x5d\x37\x43\x77\xa1\xd5\x06\x8d\x43\x43\x17\x04\xfc\x0a\x9d\x28\x84\x13\xde\x27\x9b\xbb\x9f\xef\xd3\xe7\xf2\xa8\xeb\xc6\x28\xdf\x9b\x27\x10\xa0\xf6\x1e\x8f\xa3\xae\x1f\x8e\x30\x85\x27\x4a\xf0\x83\xec\x5d\x37\x8c\xc3\xfd\xc7\xb1\x02\x54\xf4\x4d\x98\x7e\x26\x37\xf4\xe3\x64\x47\xb2\x01\x93\x76\x48\xde\x53\x11\xfe\x75\x77\x3d\xfc\x1d\x79\xde\xfb\x7b\xfe\x8d\x84\x7b\xbb\xdb\xe8\xb9\xdd\x33\x78\xa3\xe1\x93\x66\x23\x83\xb6\x19\xdd\x6d\xf9\xc1\xfb\xe6\x47\x6f\x6f\x34\xdb\xa9\xd7\xde\xb4\xda\xde\x69\x9e\x45\xcb\xf1\xac\x60\xe8\xab\xc1\xce\xc4\xe2\x3f\x63\x6f\xf9\x27\x14\x05\xfd\x0a\xf3\x05\xba\x24\x0e\x53\x42\xb9\x33\x9a\xf7\x71\x06\xb1\x68\x9a\x5a\xe6\xc2\x49\xad\xfa\xff\x94\xd2\xd0\xbe\xa3\xec\x85\x13\xae\xb5\x09\x41\xf7\x54\xb6\x3c\x0c\x93\x64\x99\x32\xcf\xf6\x6a\xfd\x1d\x00\x00\xff\xff\xd0\x88\xd3\xaa\xa9\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2473, mode: os.FileMode(436), modTime: time.Unix(1484327004, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

