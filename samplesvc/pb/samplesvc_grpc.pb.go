// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: pb/samplesvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BigTestServiceClient is the client API for BigTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BigTestServiceClient interface {
	// CreateHaveAll tests the put http method with body.
	CreateHaveAll(ctx context.Context, in *CreateHaveAllRequest, opts ...grpc.CallOption) (*CreateHaveAllResponse, error)
	// GetHaveAll should retrieve the HaveAll message with the id given in the path
	// Excluded from HaveAll are the "repeated"-fields (slices). This is not supported at the moment.
	GetHaveAll(ctx context.Context, in *GetHaveAllRequest, opts ...grpc.CallOption) (*GetHaveAllResponse, error)
	// DeepPath tests a query string given a value deeply nested in in structs.
	DeepPath(ctx context.Context, in *DeepHaveAllRequest, opts ...grpc.CallOption) (*DeepHaveAllResponse, error)
	// DoNotCreate is a testcase for a method without an method_map option. Therefore no REST frontend should be generated
	DoNotCreate(ctx context.Context, in *DoNotCreateRequest, opts ...grpc.CallOption) (*DoNotCreateResponse, error)
	// GetSmall tests path parameter.
	GetSmall(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error)
	// GetSmall1 tests path parameter in the middle of a path.
	GetSmall1(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error)
	// PutSmall tests the put http method.
	PutSmall(ctx context.Context, in *PutSmallRequest, opts ...grpc.CallOption) (*PutSmallResponse, error)
	// Flaw: id of the updated resource should be in the URI. An id from the URI should be mapped into posted objects.
	PostSmall(ctx context.Context, in *PostSmallRequest, opts ...grpc.CallOption) (*PostSmallResponse, error)
	// DeleteSmall tests the delete http method.
	DeleteSmall(ctx context.Context, in *DeleteSmallRequest, opts ...grpc.CallOption) (*DeleteSmallResponse, error)
	// GetLongPath is the testcase to assign more than one path parameter to the correct corresponding field.
	GetLongPath(ctx context.Context, in *GetLongPathRequest, opts ...grpc.CallOption) (*GetLongPathResponse, error)
	// GetPathPath tests if a path parameter can also be nested deeply into structs.
	GetPathPath(ctx context.Context, in *DeepPathPathRequest, opts ...grpc.CallOption) (*DeepPathPathResponse, error)
	// EmptyRequestMessage takes an empty request message and returns an empty request message.
	EmptyRequestMessage(ctx context.Context, in *EmptyRequestMessageRequest, opts ...grpc.CallOption) (*EmptyRequestMessageResponse, error)
	// PageSortFilter depends on other messages defined in other protobuf definitions
	// (here: Page-, Sort- and Filtermessage in pbmap/map.proto).
	PageSortFilter(ctx context.Context, in *PageSortFilterRequest, opts ...grpc.CallOption) (*PageSortFilterResponse, error)
}

type bigTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBigTestServiceClient(cc grpc.ClientConnInterface) BigTestServiceClient {
	return &bigTestServiceClient{cc}
}

func (c *bigTestServiceClient) CreateHaveAll(ctx context.Context, in *CreateHaveAllRequest, opts ...grpc.CallOption) (*CreateHaveAllResponse, error) {
	out := new(CreateHaveAllResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/CreateHaveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetHaveAll(ctx context.Context, in *GetHaveAllRequest, opts ...grpc.CallOption) (*GetHaveAllResponse, error) {
	out := new(GetHaveAllResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/GetHaveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DeepPath(ctx context.Context, in *DeepHaveAllRequest, opts ...grpc.CallOption) (*DeepHaveAllResponse, error) {
	out := new(DeepHaveAllResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/DeepPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DoNotCreate(ctx context.Context, in *DoNotCreateRequest, opts ...grpc.CallOption) (*DoNotCreateResponse, error) {
	out := new(DoNotCreateResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/DoNotCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetSmall(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error) {
	out := new(GetSmallResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/GetSmall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetSmall1(ctx context.Context, in *GetSmallRequest, opts ...grpc.CallOption) (*GetSmallResponse, error) {
	out := new(GetSmallResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/GetSmall1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PutSmall(ctx context.Context, in *PutSmallRequest, opts ...grpc.CallOption) (*PutSmallResponse, error) {
	out := new(PutSmallResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/PutSmall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PostSmall(ctx context.Context, in *PostSmallRequest, opts ...grpc.CallOption) (*PostSmallResponse, error) {
	out := new(PostSmallResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/PostSmall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) DeleteSmall(ctx context.Context, in *DeleteSmallRequest, opts ...grpc.CallOption) (*DeleteSmallResponse, error) {
	out := new(DeleteSmallResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/DeleteSmall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetLongPath(ctx context.Context, in *GetLongPathRequest, opts ...grpc.CallOption) (*GetLongPathResponse, error) {
	out := new(GetLongPathResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/GetLongPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) GetPathPath(ctx context.Context, in *DeepPathPathRequest, opts ...grpc.CallOption) (*DeepPathPathResponse, error) {
	out := new(DeepPathPathResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/GetPathPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) EmptyRequestMessage(ctx context.Context, in *EmptyRequestMessageRequest, opts ...grpc.CallOption) (*EmptyRequestMessageResponse, error) {
	out := new(EmptyRequestMessageResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/EmptyRequestMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bigTestServiceClient) PageSortFilter(ctx context.Context, in *PageSortFilterRequest, opts ...grpc.CallOption) (*PageSortFilterResponse, error) {
	out := new(PageSortFilterResponse)
	err := c.cc.Invoke(ctx, "/pb.BigTestService/PageSortFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BigTestServiceServer is the server API for BigTestService service.
// All implementations must embed UnimplementedBigTestServiceServer
// for forward compatibility
type BigTestServiceServer interface {
	// CreateHaveAll tests the put http method with body.
	CreateHaveAll(context.Context, *CreateHaveAllRequest) (*CreateHaveAllResponse, error)
	// GetHaveAll should retrieve the HaveAll message with the id given in the path
	// Excluded from HaveAll are the "repeated"-fields (slices). This is not supported at the moment.
	GetHaveAll(context.Context, *GetHaveAllRequest) (*GetHaveAllResponse, error)
	// DeepPath tests a query string given a value deeply nested in in structs.
	DeepPath(context.Context, *DeepHaveAllRequest) (*DeepHaveAllResponse, error)
	// DoNotCreate is a testcase for a method without an method_map option. Therefore no REST frontend should be generated
	DoNotCreate(context.Context, *DoNotCreateRequest) (*DoNotCreateResponse, error)
	// GetSmall tests path parameter.
	GetSmall(context.Context, *GetSmallRequest) (*GetSmallResponse, error)
	// GetSmall1 tests path parameter in the middle of a path.
	GetSmall1(context.Context, *GetSmallRequest) (*GetSmallResponse, error)
	// PutSmall tests the put http method.
	PutSmall(context.Context, *PutSmallRequest) (*PutSmallResponse, error)
	// Flaw: id of the updated resource should be in the URI. An id from the URI should be mapped into posted objects.
	PostSmall(context.Context, *PostSmallRequest) (*PostSmallResponse, error)
	// DeleteSmall tests the delete http method.
	DeleteSmall(context.Context, *DeleteSmallRequest) (*DeleteSmallResponse, error)
	// GetLongPath is the testcase to assign more than one path parameter to the correct corresponding field.
	GetLongPath(context.Context, *GetLongPathRequest) (*GetLongPathResponse, error)
	// GetPathPath tests if a path parameter can also be nested deeply into structs.
	GetPathPath(context.Context, *DeepPathPathRequest) (*DeepPathPathResponse, error)
	// EmptyRequestMessage takes an empty request message and returns an empty request message.
	EmptyRequestMessage(context.Context, *EmptyRequestMessageRequest) (*EmptyRequestMessageResponse, error)
	// PageSortFilter depends on other messages defined in other protobuf definitions
	// (here: Page-, Sort- and Filtermessage in pbmap/map.proto).
	PageSortFilter(context.Context, *PageSortFilterRequest) (*PageSortFilterResponse, error)
	mustEmbedUnimplementedBigTestServiceServer()
}

// UnimplementedBigTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBigTestServiceServer struct {
}

func (UnimplementedBigTestServiceServer) CreateHaveAll(context.Context, *CreateHaveAllRequest) (*CreateHaveAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHaveAll not implemented")
}
func (UnimplementedBigTestServiceServer) GetHaveAll(context.Context, *GetHaveAllRequest) (*GetHaveAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHaveAll not implemented")
}
func (UnimplementedBigTestServiceServer) DeepPath(context.Context, *DeepHaveAllRequest) (*DeepHaveAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeepPath not implemented")
}
func (UnimplementedBigTestServiceServer) DoNotCreate(context.Context, *DoNotCreateRequest) (*DoNotCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoNotCreate not implemented")
}
func (UnimplementedBigTestServiceServer) GetSmall(context.Context, *GetSmallRequest) (*GetSmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmall not implemented")
}
func (UnimplementedBigTestServiceServer) GetSmall1(context.Context, *GetSmallRequest) (*GetSmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmall1 not implemented")
}
func (UnimplementedBigTestServiceServer) PutSmall(context.Context, *PutSmallRequest) (*PutSmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSmall not implemented")
}
func (UnimplementedBigTestServiceServer) PostSmall(context.Context, *PostSmallRequest) (*PostSmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSmall not implemented")
}
func (UnimplementedBigTestServiceServer) DeleteSmall(context.Context, *DeleteSmallRequest) (*DeleteSmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmall not implemented")
}
func (UnimplementedBigTestServiceServer) GetLongPath(context.Context, *GetLongPathRequest) (*GetLongPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongPath not implemented")
}
func (UnimplementedBigTestServiceServer) GetPathPath(context.Context, *DeepPathPathRequest) (*DeepPathPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathPath not implemented")
}
func (UnimplementedBigTestServiceServer) EmptyRequestMessage(context.Context, *EmptyRequestMessageRequest) (*EmptyRequestMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyRequestMessage not implemented")
}
func (UnimplementedBigTestServiceServer) PageSortFilter(context.Context, *PageSortFilterRequest) (*PageSortFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageSortFilter not implemented")
}
func (UnimplementedBigTestServiceServer) mustEmbedUnimplementedBigTestServiceServer() {}

// UnsafeBigTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BigTestServiceServer will
// result in compilation errors.
type UnsafeBigTestServiceServer interface {
	mustEmbedUnimplementedBigTestServiceServer()
}

func RegisterBigTestServiceServer(s grpc.ServiceRegistrar, srv BigTestServiceServer) {
	s.RegisterService(&BigTestService_ServiceDesc, srv)
}

func _BigTestService_CreateHaveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).CreateHaveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/CreateHaveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).CreateHaveAll(ctx, req.(*CreateHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetHaveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetHaveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetHaveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetHaveAll(ctx, req.(*GetHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DeepPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepHaveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DeepPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DeepPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DeepPath(ctx, req.(*DeepHaveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DoNotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoNotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DoNotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DoNotCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DoNotCreate(ctx, req.(*DoNotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetSmall(ctx, req.(*GetSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetSmall1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetSmall1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetSmall1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetSmall1(ctx, req.(*GetSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PutSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PutSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PutSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PutSmall(ctx, req.(*PutSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PostSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PostSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PostSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PostSmall(ctx, req.(*PostSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_DeleteSmall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).DeleteSmall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/DeleteSmall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).DeleteSmall(ctx, req.(*DeleteSmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetLongPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetLongPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetLongPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetLongPath(ctx, req.(*GetLongPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_GetPathPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepPathPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).GetPathPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/GetPathPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).GetPathPath(ctx, req.(*DeepPathPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_EmptyRequestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequestMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).EmptyRequestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/EmptyRequestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).EmptyRequestMessage(ctx, req.(*EmptyRequestMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BigTestService_PageSortFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSortFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BigTestServiceServer).PageSortFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BigTestService/PageSortFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BigTestServiceServer).PageSortFilter(ctx, req.(*PageSortFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BigTestService_ServiceDesc is the grpc.ServiceDesc for BigTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BigTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BigTestService",
	HandlerType: (*BigTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHaveAll",
			Handler:    _BigTestService_CreateHaveAll_Handler,
		},
		{
			MethodName: "GetHaveAll",
			Handler:    _BigTestService_GetHaveAll_Handler,
		},
		{
			MethodName: "DeepPath",
			Handler:    _BigTestService_DeepPath_Handler,
		},
		{
			MethodName: "DoNotCreate",
			Handler:    _BigTestService_DoNotCreate_Handler,
		},
		{
			MethodName: "GetSmall",
			Handler:    _BigTestService_GetSmall_Handler,
		},
		{
			MethodName: "GetSmall1",
			Handler:    _BigTestService_GetSmall1_Handler,
		},
		{
			MethodName: "PutSmall",
			Handler:    _BigTestService_PutSmall_Handler,
		},
		{
			MethodName: "PostSmall",
			Handler:    _BigTestService_PostSmall_Handler,
		},
		{
			MethodName: "DeleteSmall",
			Handler:    _BigTestService_DeleteSmall_Handler,
		},
		{
			MethodName: "GetLongPath",
			Handler:    _BigTestService_GetLongPath_Handler,
		},
		{
			MethodName: "GetPathPath",
			Handler:    _BigTestService_GetPathPath_Handler,
		},
		{
			MethodName: "EmptyRequestMessage",
			Handler:    _BigTestService_EmptyRequestMessage_Handler,
		},
		{
			MethodName: "PageSortFilter",
			Handler:    _BigTestService_PageSortFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/samplesvc.proto",
}
