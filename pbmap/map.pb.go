// Code generated by protoc-gen-go.
// source: map.proto
// DO NOT EDIT!

/*
Package pbmap is a generated protocol buffer package.

It is generated from these files:
	map.proto

It has these top-level messages:
	MethodMap
	QueryMap
	Page
	Filter
	Sort
	ServiceMap
*/
package pbmap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MethodMap gives the parameters how to Map a GRPC Service Method to an REST Endpoint
type MethodMap struct {
	// "GET", "PUT", "POST", "DELETE"
	Method string `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	// Format "a/b/c/:d/:e" - a/b/c are fixed in the path, :d and :e are paramaters mapped to fields D, E in the underlying GRPC Request
	// Has to be compatible with Julian Schmidt's HTTP Router
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Format "key1=:var1&key=:var2" They keys will be mapped to the variables var1, var2 of the unterlying GRPC Request
	QueryString string `protobuf:"bytes,3,opt,name=query_string,json=queryString" json:"query_string,omitempty"`
	Body        string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *MethodMap) Reset()                    { *m = MethodMap{} }
func (m *MethodMap) String() string            { return proto.CompactTextString(m) }
func (*MethodMap) ProtoMessage()               {}
func (*MethodMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MethodMap) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MethodMap) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MethodMap) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *MethodMap) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

// If an Submessage of an Request-Message in Protobuf has a field (directly at the moment, deeper nesting is not supported at the moment), then additional parameters defined in query (similar to the querystring syntax of your rest-framework) will be added to the queryString documentation and mapped automatically to the objects
type QueryMap struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QueryMap) Reset()                    { *m = QueryMap{} }
func (m *QueryMap) String() string            { return proto.CompactTextString(m) }
func (*QueryMap) ProtoMessage()               {}
func (*QueryMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryMap) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Page provides information from the query string which you can use to get a larger collection of objects pagewise
type Page struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=Limit" json:"Limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Page) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Page) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Filter struct {
	Query string `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Filter) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Sort provides information from the query string on how to sort a given collection of objects
type Sort struct {
	Field string `protobuf:"bytes,1,opt,name=Field" json:"Field,omitempty"`
	Desc  bool   `protobuf:"varint,2,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *Sort) Reset()                    { *m = Sort{} }
func (m *Sort) String() string            { return proto.CompactTextString(m) }
func (*Sort) ProtoMessage()               {}
func (*Sort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Sort) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Sort) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

// ServiceMap provides information for how to map an GRPC Service to an REST Service
type ServiceMap struct {
	Version       string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	BaseUri       string `protobuf:"bytes,2,opt,name=base_uri,json=baseUri" json:"base_uri,omitempty"`
	TargetPackage string `protobuf:"bytes,3,opt,name=target_package,json=targetPackage" json:"target_package,omitempty"`
}

func (m *ServiceMap) Reset()                    { *m = ServiceMap{} }
func (m *ServiceMap) String() string            { return proto.CompactTextString(m) }
func (*ServiceMap) ProtoMessage()               {}
func (*ServiceMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceMap) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServiceMap) GetBaseUri() string {
	if m != nil {
		return m.BaseUri
	}
	return ""
}

func (m *ServiceMap) GetTargetPackage() string {
	if m != nil {
		return m.TargetPackage
	}
	return ""
}

var E_MethodMap = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*MethodMap)(nil),
	Field:         87654321,
	Name:          "pbmap.method_map",
	Tag:           "bytes,87654321,opt,name=method_map,json=methodMap",
	Filename:      "map.proto",
}

var E_QueryMap = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*QueryMap)(nil),
	Field:         9813242,
	Name:          "pbmap.query_map",
	Tag:           "bytes,9813242,opt,name=query_map,json=queryMap",
	Filename:      "map.proto",
}

var E_ServiceMap = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*ServiceMap)(nil),
	Field:         87654323,
	Name:          "pbmap.service_map",
	Tag:           "bytes,87654323,opt,name=service_map,json=serviceMap",
	Filename:      "map.proto",
}

func init() {
	proto.RegisterType((*MethodMap)(nil), "pbmap.MethodMap")
	proto.RegisterType((*QueryMap)(nil), "pbmap.QueryMap")
	proto.RegisterType((*Page)(nil), "pbmap.Page")
	proto.RegisterType((*Filter)(nil), "pbmap.Filter")
	proto.RegisterType((*Sort)(nil), "pbmap.Sort")
	proto.RegisterType((*ServiceMap)(nil), "pbmap.ServiceMap")
	proto.RegisterExtension(E_MethodMap)
	proto.RegisterExtension(E_QueryMap)
	proto.RegisterExtension(E_ServiceMap)
}

func init() { proto.RegisterFile("map.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x56, 0xc1, 0x4d, 0xe3, 0x09, 0x3f, 0xc5, 0x42, 0xc8, 0xf4, 0x40, 0x83, 0xa5, 0x94, 0x22,
	0x21, 0x17, 0xc1, 0xcd, 0xb2, 0x7d, 0x42, 0x3d, 0x51, 0x35, 0x71, 0x04, 0xd7, 0x68, 0x9d, 0x6c,
	0x9c, 0x15, 0x71, 0x76, 0xb3, 0xbb, 0xa9, 0xd4, 0xc7, 0x42, 0x1c, 0x78, 0x0c, 0x24, 0x0e, 0xbc,
	0x01, 0x0f, 0x01, 0x17, 0xd0, 0xcc, 0xae, 0x0b, 0x07, 0x38, 0x79, 0xbe, 0x6f, 0x66, 0xbf, 0x19,
	0xcf, 0x7c, 0x10, 0xb6, 0x4c, 0xa5, 0x4a, 0x4b, 0x2b, 0xa3, 0x7d, 0x55, 0xb7, 0x4c, 0x1d, 0x0d,
	0x1b, 0x29, 0x9b, 0x35, 0x3f, 0x23, 0xb2, 0xde, 0x2d, 0xcf, 0x16, 0xdc, 0xcc, 0xb5, 0x50, 0x56,
	0x6a, 0x57, 0x98, 0x6c, 0x20, 0xbc, 0xe0, 0x76, 0x25, 0x17, 0x17, 0x4c, 0x45, 0x8f, 0xa0, 0xd7,
	0x12, 0x88, 0xf7, 0x86, 0x7b, 0xa7, 0x61, 0xe5, 0x51, 0x14, 0x41, 0xa0, 0x98, 0x5d, 0xc5, 0xb7,
	0x88, 0xa5, 0x38, 0x7a, 0x0a, 0x77, 0xb6, 0x3b, 0xae, 0xaf, 0x67, 0xc6, 0x6a, 0xb1, 0x69, 0xe2,
	0xdb, 0x94, 0x1b, 0x10, 0x37, 0x25, 0x0a, 0x9f, 0xd5, 0x72, 0x71, 0x1d, 0x07, 0xee, 0x19, 0xc6,
	0xc9, 0x10, 0xfa, 0x13, 0x2c, 0xc1, 0x76, 0x0f, 0x61, 0x9f, 0xca, 0x7d, 0x37, 0x07, 0x92, 0x1a,
	0x82, 0x31, 0x6b, 0x38, 0x66, 0xdf, 0x8a, 0x56, 0x58, 0xca, 0x06, 0x95, 0x03, 0x38, 0xe2, 0xe5,
	0x72, 0x69, 0xb8, 0xa5, 0x61, 0x82, 0xca, 0xa3, 0xec, 0xc5, 0xd7, 0x2f, 0x9f, 0x47, 0xcf, 0x60,
	0xa4, 0x58, 0xc3, 0x1d, 0x55, 0xe4, 0xee, 0x5b, 0x9e, 0x20, 0x47, 0xaf, 0x8b, 0x9c, 0x3e, 0x65,
	0xf2, 0x12, 0x7a, 0xe7, 0x62, 0x6d, 0xb9, 0xc6, 0x2e, 0x93, 0xbf, 0x67, 0x20, 0x90, 0x1d, 0xa2,
	0xda, 0x00, 0xc2, 0x6d, 0x91, 0x13, 0x51, 0x26, 0x13, 0x08, 0xa6, 0x52, 0x5b, 0xac, 0x3f, 0x17,
	0x7c, 0xdd, 0x6d, 0xc8, 0x01, 0xfc, 0xd3, 0x37, 0xdc, 0xcc, 0x69, 0xa6, 0x7e, 0x45, 0x71, 0x76,
	0x8c, 0x1a, 0x47, 0x10, 0x1b, 0xa9, 0x6d, 0x91, 0x53, 0x5d, 0x79, 0x82, 0xfb, 0x2f, 0x72, 0xcc,
	0x97, 0xc9, 0x0a, 0x60, 0xca, 0xf5, 0x95, 0x98, 0x73, 0x5c, 0x46, 0x0c, 0x07, 0x57, 0x5c, 0x1b,
	0x21, 0x37, 0x5e, 0xba, 0x83, 0xd1, 0x63, 0xe8, 0xd7, 0xcc, 0xf0, 0xd9, 0x4e, 0x0b, 0x7f, 0x81,
	0x03, 0xc4, 0xef, 0xb4, 0x88, 0x46, 0x70, 0xcf, 0x32, 0xdd, 0x70, 0x3b, 0x53, 0x6c, 0xfe, 0x81,
	0x35, 0xdc, 0x9f, 0xe1, 0xae, 0x63, 0xc7, 0x8e, 0xcc, 0x2a, 0x00, 0x77, 0xc9, 0x59, 0xcb, 0x54,
	0xf4, 0x24, 0x75, 0xae, 0x48, 0x3b, 0x57, 0xa4, 0xce, 0x01, 0x97, 0xca, 0x0a, 0xb9, 0x31, 0xf1,
	0xc7, 0x5f, 0xdf, 0x9f, 0x0f, 0xf7, 0x4e, 0x07, 0xaf, 0x0e, 0x53, 0x72, 0x51, 0x7a, 0x63, 0x90,
	0x2a, 0x6c, 0xbb, 0x30, 0x1b, 0x43, 0xe8, 0xee, 0x8f, 0x92, 0xc7, 0xff, 0x90, 0x34, 0x06, 0x4f,
	0xe1, 0x35, 0x7f, 0xfe, 0xf8, 0x16, 0x90, 0xe6, 0x7d, 0xaf, 0xd9, 0x99, 0xa0, 0xea, 0x6f, 0x7d,
	0x94, 0xbd, 0x87, 0x81, 0x71, 0xfb, 0xf8, 0x8f, 0xa6, 0xdf, 0x56, 0xa7, 0xf9, 0xa9, 0x9b, 0xf3,
	0x81, 0xd7, 0xfc, 0xb3, 0xcd, 0x0a, 0xcc, 0x4d, 0x5c, 0xf7, 0x48, 0xe0, 0xf5, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7b, 0x78, 0xb9, 0xb7, 0x1f, 0x03, 0x00, 0x00,
}
