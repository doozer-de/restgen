// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x1e\x0a\xa9\x50\xe8\x3d\x0e\x29\xfc\xb0\x66\x5d\x5a\x74\x29\x52\x3b\x6d\x1f\x82\x60\xa0\xa5\xb3\xc4\x55\x26\x15\x92\xb2\xe3\x0a\xfc\xdf\x87\xa3\x7e\xc4\x8e\x87\x04\xc3\xf6\x14\x91\x77\xf7\xdd\xdd\x77\x1f\xcf\x69\x44\xfe\x5d\x94\x08\x5d\xc7\x6f\x84\x29\xd1\x5d\xf7\x17\xde\x33\x26\x37\x8d\x36\x0e\x12\x16\xc5\x0a\xdd\xac\x72\xae\x89\x59\x14\x4b\x3d\x93\xba\x75\xb2\xa6\x03\xaa\x5c\x17\x52\x95\xb3\xbf\xac\x56\x74\xb1\xde\xb8\x98\xb1\x28\xee\x3a\x7e\xa9\x27\x30\xb2\x94\xd2\x55\xed\x8a\xe7\x7a\x33\x2b\xb4\xfe\x81\xe6\xac\xc0\x99\x41\xeb\x82\x51\xd7\x42\x95\x5c\x9b\x72\xf6\x30\xa3\x6c\xb9\x56\x0e\x1f\xc8\xd6\x75\x46\xa8\x12\x81\x7f\x08\xf5\x58\xef\x59\x14\xf0\x03\x6c\xd7\x9d\x01\xaa\xc2\x7b\x96\x32\xb6\x15\x86\xca\x5d\x09\x8b\x5f\x16\x1f\x60\x0e\xe4\xf6\xb6\x3f\x05\xef\x3f\x61\x0e\x7d\xf1\xfc\x37\x69\x73\x61\x0a\x0a\x73\xfb\x06\xe1\xf3\xf2\x5a\x18\xb1\x41\x87\x06\xac\x33\x6d\xee\xa0\x63\xd1\x47\xdc\x03\xd0\x59\xaa\x12\x66\x33\xf8\x56\xc9\xbc\x82\xef\xb8\x67\xd1\xef\x12\xeb\xe2\xc0\x54\x6a\xb4\xe0\x34\xec\x82\xcb\x3a\x58\xa5\x02\x01\xa5\x1e\x00\x59\x74\x43\x99\x0e\x62\x6c\xa5\xdb\xba\x80\x4a\x6c\x11\x76\x95\x70\x40\xa5\x30\xcf\x18\x5b\xb7\x2a\x87\xc4\xc2\xeb\x4b\x54\x68\x84\xc3\x62\x89\x66\x2b\x73\x4c\xe1\x12\xdd\x7b\xa1\x8a\x1a\x8d\xbd\xd1\x0b\x2c\xa5\x75\x68\x92\x14\x6e\xef\x88\x4d\x3e\xde\x50\xf9\x06\x5d\x6b\xd4\x53\x4b\x07\x13\xa7\x97\xe8\xae\x44\xd3\x60\x71\x85\xae\xd2\x45\x4f\x6e\x07\xfd\xe9\x3c\xf0\xb7\x78\xb7\xbc\xe9\xcf\xde\xc7\x19\x5c\x0b\x57\xf5\x86\xf7\xc2\x6c\xb4\x92\x3f\xb0\x20\x17\xba\x0f\x0e\x43\x6d\xe7\x60\x79\xd7\xf1\x4f\x62\x83\xde\x83\xcf\x0e\x47\x15\x79\xea\xf1\xf9\x16\x87\xb1\x25\xe9\x48\xd7\x63\x3b\xc3\x7c\x5f\xc0\x58\xa2\x7b\x67\x8c\x36\x43\x3d\x49\x05\x81\x84\xc3\xbb\x14\x90\x4e\x04\x2d\xd7\x50\xc1\x7c\x0e\x4a\xd6\x74\x1c\x53\xad\x37\x43\xc4\x3a\x89\x0f\x23\x21\x17\x4a\x69\x07\x2b\xa4\x88\x38\xa5\x96\x22\xcb\xf1\xd0\x65\x0e\xd5\x54\xb2\x92\x35\x95\x1b\x94\xf6\xb4\xd4\x03\xb9\x8d\x37\x5d\xc7\x87\x4f\x52\x0c\x31\x76\x84\x7c\xd2\xc8\x44\xc5\x27\xdc\x3d\x85\x4f\xec\x09\x5c\x06\xcf\xc3\xa5\x90\x9c\x10\x3a\xc4\xa4\x03\x59\xf6\x1f\xc8\x52\xb2\xce\x8e\x18\xbb\xa9\x10\x4a\xb9\x45\x05\x97\x8b\xeb\x0b\x18\xbb\x3b\xe0\xae\xad\x07\xf2\x26\xa6\x5e\x3d\x4d\x4c\x09\x86\xcf\x73\xb0\x19\x8b\x8e\xb8\x38\x3f\x6a\x25\x63\x91\xcf\x46\xb2\x9f\x13\xf9\x33\xba\x99\x44\x9b\xe4\xee\x01\x86\x3d\xc4\x2f\xfa\xbf\x19\xec\x80\x16\x21\x5f\xa0\x6d\xb4\xb2\xf8\xcd\x48\x87\x26\x03\x03\xaf\x87\xfb\xfb\x16\xad\x4b\x7b\xb9\xde\xc3\xf9\x9c\x00\x3f\xa8\xa6\x75\xc4\x7d\x8f\xdc\x79\x7a\x0d\x72\x0d\x78\x0f\xf1\xeb\x18\xc2\x1b\x7b\xab\x8b\x3d\x9c\x85\x07\xb8\xd2\xc5\x3e\xf0\x4d\xe1\xc3\xbe\x5a\xa0\x28\x7e\xad\xeb\xc4\x70\x72\x4c\x59\x44\x53\x20\x97\x9f\x1e\xe7\xf0\x44\x81\xd4\x40\x06\xbb\x0c\x4c\x00\xa3\x98\x81\x65\x16\x91\x5e\xa3\x02\xd7\x34\xfe\x80\xc8\x2f\x6a\x6d\x31\x49\x59\x4f\x30\xcc\x81\x56\x3a\xff\xa2\x36\xc2\xd8\x4a\xd4\x49\x5f\xd4\x2b\x83\xf7\xff\x4b\xf2\xc7\x6d\x40\xdf\x3b\xe9\xaa\x9e\x86\xcf\x2d\x9a\xfd\x32\x3c\xf9\xc0\xc5\x56\xd4\x2d\x5a\x22\xc2\xf0\x2f\x8b\x3f\x78\xb0\x27\x04\x37\xcd\x37\xf8\xc9\x35\x6c\x33\xd0\xdf\xc9\xb3\x8f\xb9\xa5\x25\xf5\x11\xf7\xde\xc7\x77\x6f\xc8\x12\xaa\x94\x6b\x78\x18\xfd\x82\xf0\xbb\xee\x12\xdd\x85\x56\x5b\x34\x0e\x0d\x0d\x08\xf8\x15\x3a\x51\x08\x27\xbc\x4f\xb6\xb7\x3f\xdf\xa5\x8f\xe1\x51\xd7\x4d\x56\x3e\x8a\x27\x14\x40\xed\xdd\x1f\x5b\x5d\xbf\x14\x61\x0e\x0f\xe4\xe0\x07\xda\xbb\x6e\x58\x83\xe3\xc7\x31\x03\x14\xf4\x55\x98\x7e\x17\x37\xf4\xa3\x64\xa7\x62\x03\x26\xdd\x10\xbd\xa7\x24\xfc\xeb\xee\x7a\xf8\x5b\xd2\xbc\xf7\x77\xfc\x2b\x11\xf7\x72\xb7\xd1\x63\xbb\x67\xf0\x42\xc3\x27\xcd\x46\x06\x6d\x33\xa9\xdb\x8e\x9b\x89\x1f\xbd\xbb\x49\x68\xa7\x3a\x7b\x51\x66\xa3\xca\x3c\x8b\x56\x53\x9e\x20\xe6\xab\x41\xca\x54\xc1\x7f\xc6\xde\xf1\xf7\x28\x0a\xfa\xe5\xe5\x4b\x74\x49\x1c\x36\x84\x72\x67\xb4\xe3\xe3\x0c\x62\xd1\x34\xb5\xcc\x85\x93\x5a\x85\xff\x8e\xde\x40\x5e\x09\x63\xd1\xcd\x5b\xb7\x3e\xfb\x85\xd6\x5e\x98\xd0\x12\xdd\xd2\x09\xd7\xda\x84\x32\xf5\x95\xed\x78\xd8\x2b\xc9\x2a\x65\x9e\x8d\xc4\xfd\x1d\x00\x00\xff\xff\xbd\x7e\xeb\xd5\xac\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2476, mode: os.FileMode(420), modTime: time.Unix(1485785572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

