// Code generated by go-bindata.
// sources:
// bff.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bffTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\x3e\x8b\x4f\x31\xab\x43\x21\x15\x36\xbd\xc7\x45\x0a\x1f\xb6\x69\x9b\x06\xdd\xb4\xa9\xed\xb6\x87\x20\x58\xd0\xd2\x48\xe2\x56\x26\x15\x92\xb2\xe3\x0a\x7c\xf7\xc5\x50\x92\xed\x24\x8b\x14\x8b\xde\xc4\xf9\x9f\x8f\xdf\x0c\x35\x9b\xc1\xb9\xce\x11\x4a\x54\x68\x84\xc3\x1c\xd6\x7b\x68\x8c\x76\x3a\x9b\x96\xa8\xa6\xeb\xa2\xe0\xf0\xe6\x13\x7c\xfc\xb4\x82\xb7\x6f\x2e\x57\x9c\xb1\x46\x64\xdf\x45\x89\xd0\x75\x7c\x25\x4c\x89\xee\xba\x17\x78\xcf\x98\xdc\x34\xda\x38\x48\x58\x14\x2b\x74\xb3\xca\xb9\x26\x66\x51\x2c\xf5\x4c\xea\xd6\xc9\x9a\x0e\xa8\x32\x9d\x4b\x55\xce\xfe\xb1\x5a\x91\xa0\xd8\xb8\x98\xb1\x28\xee\x3a\x7e\xa1\x0f\xc1\x48\x53\x4a\x57\xb5\x6b\x9e\xe9\xcd\x2c\xd7\xfa\x07\x9a\x69\x8e\x33\x83\xd6\xc5\x2c\xea\x3a\x23\x54\x89\xc0\x2f\x43\x4e\xeb\x3d\x8b\x42\x8c\xe0\xda\x75\x53\x40\x95\x7b\xcf\x52\xc6\xb6\xc2\x50\x49\x6b\x61\xf1\xcb\xe2\x12\xe6\x40\x66\xaf\xfb\x53\xb0\xfe\x1b\xe6\xd0\x17\xc8\xdf\x48\x9b\x09\x93\x93\x9b\xdb\x37\x08\x9f\x97\xd7\xc2\x88\x0d\x3a\x34\x60\x9d\x69\x33\x07\x1d\x8b\x3e\xe0\x1e\x80\xce\x52\x95\x30\x9b\xc1\xb7\x4a\x66\x15\x7c\xc7\x3d\x8b\xde\x49\xac\xf3\x13\x55\xa9\xd1\x82\xd3\xb0\x0b\x26\x45\xd0\x4a\x05\x02\x4a\x3d\x04\x64\xd1\x8a\x32\x9d\xf8\xd8\x4a\xb7\x75\x0e\x95\xd8\x22\xec\x2a\xe1\x80\x4a\x61\x9e\x31\x56\xb4\x2a\x83\xc4\xc2\xcb\x8b\xf1\xc2\x96\x68\xb6\x32\xc3\x14\x2e\xd0\xbd\x17\x2a\xaf\xd1\xd8\x95\x5e\x60\x29\xad\x43\x93\xa4\x70\x73\x4b\x88\xf1\x51\x42\xe5\x1b\x74\xad\x51\x8f\x35\x1d\x1c\x30\xbd\x40\x77\x25\x9a\x06\xf3\x2b\x74\x95\xce\x7b\x70\x3b\x16\x45\x51\x2f\x38\x83\x80\xe1\xe2\xed\x72\xd5\x0b\xbc\x8f\x27\xa4\xbe\x16\xae\x3a\x03\xe8\xd5\xef\x85\xd9\x68\x25\x7f\x60\x4e\x86\xa4\x1a\xcd\x86\x42\xcf\x80\x18\xc2\x87\xd3\xbb\x56\x65\x89\xe5\x5d\xc7\x3f\x8a\x0d\x7a\x9f\x92\xa9\x9f\x9c\x5e\x66\xe4\x09\x85\xe7\x41\x18\x2e\x36\x49\x47\x40\x8f\x0d\x0f\x0c\xf8\x49\x8c\x25\xba\xb7\xc6\x68\x33\x94\x95\x54\x10\x60\x3a\x95\xa5\x80\x74\xa2\xd0\xb2\x80\x0a\xe6\x73\x50\xb2\xa6\xe3\x98\xaa\xd8\x0c\x1e\x45\x12\x9f\x7a\x42\x26\x94\xd2\x0e\xd6\x48\x1e\x71\x4a\x2d\x45\x96\xe3\xa9\xc9\x1c\xaa\x43\xc9\x4a\xd6\x54\x6e\xe0\xe2\xe3\x52\x4f\x08\x39\x4a\xba\x8e\x0f\x9f\xc4\x29\x42\xec\x41\xe4\x27\x8d\x1c\xa0\xf8\x88\xbb\xc7\xe1\x13\xfb\x24\xdc\x04\x9e\x0f\x97\x42\xf2\x04\xd0\xc1\x27\x1d\xc0\xb2\xff\x01\x96\x92\xf5\xe4\x01\x62\xab\x0a\xa1\x94\x5b\x54\x70\xb1\xb8\x3e\x87\xb1\xbb\x13\xec\xda\x7a\x00\xef\x80\xd4\x8b\xc7\x89\x29\xc1\xf0\x79\x06\x96\xc8\x74\x5a\xfc\xd9\x83\x56\x26\x2c\xf2\x93\x11\xec\xe7\xc6\xe0\x19\xde\x1c\x88\x9b\xec\x7a\x5e\x2f\xd0\x36\x5a\x59\xfc\x66\xa4\x43\x33\x01\x03\x2f\x07\xf9\x5d\x8b\xd6\x05\x44\x32\x77\x0f\x67\x73\x30\xfc\x5c\x2b\x87\xf7\x2e\x49\xa9\xa1\x3b\x92\x75\x1d\xbf\x54\x4d\xeb\x08\xfa\x3e\x70\xe7\x69\x18\x64\x01\x78\x07\xf1\xcb\x18\xc2\x00\xbe\xd6\xf9\x1e\xa6\x61\x42\xd7\x3a\xdf\x07\xb8\xc9\x7d\x58\x68\x0b\x14\xf9\x9f\x75\x9d\x18\x4e\x86\x29\x8b\xe8\x12\xc8\xe4\xb7\xe3\x35\x3c\x22\x60\xb2\x9b\x80\x09\x71\xc8\x7c\xc0\x97\x66\x91\x45\x51\x8e\x05\x5d\x7c\x08\xc6\xcf\x6b\x6d\x31\x49\x59\x0f\x2d\xcc\x81\x56\x3a\xff\xa2\x36\xc2\xd8\x4a\xd4\x49\x5f\xcf\x0b\x83\x77\xbf\x9a\xf7\xb8\x02\xe8\x7b\x27\x5d\xd5\x37\xff\xb9\x45\xb3\x5f\x86\x39\x0f\x08\x6c\x45\xdd\xa2\xed\x11\xfd\xb2\xf8\x8b\x07\x3d\x61\x7a\x7c\x2f\x82\x9d\x2c\x60\x3b\x01\xfd\x9d\x2c\x7b\x9f\x1b\xda\x58\x1f\x70\xef\x7d\x7c\xfb\x8a\x34\xa1\x40\x59\xc0\xfd\x68\x17\xd8\xde\x75\x17\xe8\xce\xb5\xda\xa2\x71\x68\xe8\x5a\x80\x5f\xa1\x13\xb9\x70\xc2\xfb\x64\x7b\xf3\xfb\x6d\x7a\x74\x8f\xba\xee\xa0\xe5\x23\x63\x42\x01\xd4\xde\xdd\x43\xad\xeb\x37\x24\xcc\xe1\x9e\x0c\xfc\x80\x78\xd7\x0d\xbb\x6f\xfc\x78\x88\x00\x39\x7d\x15\xa6\x5f\xd1\x0d\xbd\x55\xf6\x50\x6c\x88\x49\x92\x24\x73\xf7\x4f\x41\xf8\xdf\xdd\xf5\xe1\x6f\x88\xe8\xde\xdf\xf2\xaf\x04\xdc\xcf\xbb\x8d\x8e\xed\x4e\xe1\x27\x0d\x3f\x69\x36\x32\x68\x9b\x03\xa7\xed\xb8\x8e\x8e\xaf\x04\xb5\x76\xe0\xd8\x53\x8a\x3d\xc7\xb0\x91\x60\x9e\x45\xeb\x43\x8a\x40\xe1\xab\x81\xc0\x94\xfc\x57\xc2\xee\xf8\x7b\x14\x39\x3d\xc3\x7c\x89\x2e\x89\xc3\x90\x2b\x37\xa5\x75\x1e\x4f\x20\x16\x4d\x53\xcb\x4c\x38\xa9\x55\xf8\x1d\x7a\x05\x59\x25\x8c\x45\x37\x6f\x5d\x31\xfd\x23\x0e\xcb\xc0\x3a\x72\x5e\x3a\xe1\x5a\x1b\x32\xf5\x45\xed\x78\xd8\x2b\xc9\x3a\x65\x9e\x8d\x70\xfd\x1b\x00\x00\xff\xff\x6b\x90\xef\x60\xd0\x09\x00\x00")

func bffTmplBytes() ([]byte, error) {
	return bindataRead(
		_bffTmpl,
		"bff.tmpl",
	)
}

func bffTmpl() (*asset, error) {
	bytes, err := bffTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bff.tmpl", size: 2512, mode: os.FileMode(420), modTime: time.Unix(1518865581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bff.tmpl": bffTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bff.tmpl": &bintree{bffTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

